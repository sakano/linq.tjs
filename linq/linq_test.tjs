// ======================================================== Enumerable.from
function testEnumerableFromArray
{
    var testArray = function(array) {
        var index = 0;
        var enumerable = Enumerable.from(array);
        var enumerator = enumerable.getEnumerator();
        while (enumerator.moveNext()) {
            equals(enumerator.current, array[index]);
            ++index;
        }
        equals(index, array.count);
    };

    testArray([1, 5, 10]);
    testArray([]);
    testArray([-1, "str", true, false, null, void]);
    testArray([void, [1, 2, 3], [], %[]]);
}

function testEnumerableFromDictionary
{
    var testDictionary = function(dic) {
        var copy = %[];
        (Dictionary.assign incontextof copy)(dic);
        var enumerable = Enumerable.from(dic);
        var enumerator = enumerable.getEnumerator();
        while (enumerator.moveNext()) {
            var pair = enumerator.current;
            equals(pair.value, dic[pair.key]);
            equals(pair.value, copy[pair.key]);
            delete copy[pair.key];
        }
        equals(Scripts.getObjectKeys(copy).count, 0);
    };

    testDictionary(%[ key:1, key2:10, key3:-10 ]);
    testDictionary(%[]);
    testDictionary(%[ "int"=>1, "real"=>1.0, "null"=>null, "str"=>"str", "true"=>true, "false"=>false, "void"=>void ]);
    testDictionary(%[ ary:[100, 200], dic:%[ key:"value" ] ]);
}

function testEnumerableFromString
{
    var testString = function(str) {
        var index = 0;
        var enumerable = Enumerable.from(str);
        var enumerator = enumerable.getEnumerator();
        while (enumerator.moveNext()) {
            equals(enumerator.current, str[index]);
            ++index;
        }
        equals(index, str.length);
    };

    testString("test");
    testString("");
    testString("aaa bb c ");
    testString("$");
}

function testEnumerableFromEnumerable
{
    var enumerable = %[
        getEnumerator : function {}
    ];
    equals(Enumerable.from(enumerable), enumerable);

    var enumerable = Enumerable.from(enumerable, false);
    var enumerator = enumerable.getEnumerator();
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.key, "getEnumerator");
    assert(enumerator.current.value instanceof "Function");
    equals(enumerator.moveNext(), false);

    equals(Enumerable.from(function{}), null);
}

// ======================================================== toArray
function testToArray
{
    equals(
        Enumerable.from([1, 10, 100, void, null, %[], [], void]).toArray(),
        [1, 10, 100, void, null, %[], [], void]
    );
    equals(Enumerable.from([]).toArray(), []);
    equals(Enumerable.from("str").toArray(), ["s", "t", "r"]);
    equals(Enumerable.from("s").toArray(), ["s"]);
    equals(Enumerable.from(%[ key:123 ]).toArray(), [ %[ key:"key", value:123 ] ]);
}

// ======================================================== toArray
function testToString
{
    equals(Enumerable.from([1, 2, 3]).toString(), "123");
    equals(Enumerable.from([1, 2, 3]).toString(","), "1,2,3");
    equals(Enumerable.from([1, 2, 3]).toString(", "), "1, 2, 3");
    equals(Enumerable.from("abc").toString(""), "abc");
}

// ======================================================== toDictionary
function testToDictionary
{
    equals(
        Enumerable.range(1, 3)
            .toDictionary(function(x) { return x; }),
        %[ "1"=>1, "2"=>2, "3"=>3 ]
    ) ;
    equals(
        Enumerable.empty()
            .toDictionary(function(x) { throw new Exception("never called");}),
        %[]
    );
    equals(
        Enumerable.range(2, 4)
            .toDictionary(
                function(x, a, b) { return x + a; },
                function(x, a, b) { return x * b; },
                10, -1
            ),
        %[ "12"=>-2, "13"=>-3, "14"=>-4, "15"=>-5 ]
    );
    equals(
        Enumerable.range(1, 3).toDictionary("_"),
        %[ "1"=>1, "2"=>2, "3"=>3 ]
    );
    equals(
        Enumerable.range(-1, 3, -1)
            .toDictionary("_", "_ * 10"),
        %[ "-1"=>-10, "-2"=>-20, "-3"=>-30 ]
    );
    throws(
        "Exception",
        "toDictionary:keySelector produces duplicate keys",
        function { Enumerable.repeat(1, 2).toDictionary("_"); }
    );
}

// ======================================================== toLookup
function testToLooup
{
    equals(
        Enumerable.range(1, 3)
            .toLookup(function(x) { return x; }),
        %[ "1"=>[1], "2"=>[2], "3"=>[3] ]
    ) ;
    equals(
        Enumerable.empty()
            .toLookup(function(x) { throw new Exception("never called");}),
        %[]
    );
    equals(
        Enumerable.range(2, 4)
            .toLookup(
                function(x, a, b) { return x + a; },
                function(x, a, b) { return x * b; },
                10, -1
            ),
        %[ "12"=>[-2], "13"=>[-3], "14"=>[-4], "15"=>[-5] ]
    );
    equals(
        Enumerable.range(1, 3).toLookup("_"),
        %[ "1"=>[1], "2"=>[2], "3"=>[3] ]
    );
    equals(
        Enumerable.repeat(1, 2).toLookup("_"),
        %[ "1"=>[1, 1] ]
    );
    equals(
        Enumerable.range(0, 5).toLookup("_ % _2", "_", 3),
        %[ "0"=>[0, 3], "1"=>[1, 4], "2"=>[2] ]
    );
}

// ======================================================== Enumerable.empty
function testEnumerableEmpty
{
    var enumerable = Enumerable.empty();
    var enumerator = enumerable.getEnumerator();
    for (var i = 0; i < 100; ++i) {
        equals(enumerator.moveNext(), false);
    }
    equals(Enumerable.empty().toArray(), []);
}

// ======================================================== Enumerable.generate
function testEnumerableGenerate
{
    var enumerator = Enumerable.generate(function { return 100; }).getEnumerator();
    for (var i = 0; i < 100; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, 100);
    }

    var enumerator = Enumerable.generate(function { return 0; }, 10).getEnumerator();
    for (var i = 0; i < 10; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, 0);
    }
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.generate(function { throw new Exception("never called"); }, 0).getEnumerator();
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.generate(
        function(index, ary) { return ary[index]; },
        3, [0, 10, 20]
    ).getEnumerator();
    for (var i = 0; i < 3; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, i*10);
    }
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.generate("_ * 10", 5).getEnumerator();
    for (var i = 0; i < 5; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, i * 10);
    }
    equals(enumerator.moveNext(), false);

}

// ======================================================== Enumerable.range
function testEnumerableRange
{
    var ary = Enumerable.range(1, 10).toArray();
    equals(
        Enumerable.range(1, 10).toArray(),
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    );
    equals(
        Enumerable.range(1, 0).toArray(),
        []
    );
    equals(
        Enumerable.range(0, 1).toArray(),
        [0]
    );
    equals(
        Enumerable.range(-10, 6, 3).toArray(),
        [-10, -7, -4, -1, 2, 5]
    );

    var query = Enumerable.range(0, 3);
    equals(query.toArray(), [0, 1, 2]);
    equals(query.toArray(), [0, 1, 2]);
    equals(query.toArray(), [0, 1, 2]);
}

// ======================================================== Enumerable.repeat
function testEnumerableRepeat
{
    var enumerator = Enumerable.repeat(10).getEnumerator();
    for (var i = 0; i < 1000; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, 10);
    }

    var enumerator = Enumerable.repeat(10, 5).getEnumerator();
    for (var i = 0; i < 5; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, 10);
    }
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.repeat(10, 0).getEnumerator();
    equals(enumerator.moveNext(), false);

    var query = Enumerable.repeat(0, 3);
    equals(query.toArray(), [0, 0, 0]);
    equals(query.toArray(), [0, 0, 0]);
    equals(query.toArray(), [0, 0, 0]);
}

// ======================================================== Enumerable.returns
function testEnumerableReturns
{
    equals(Enumerable.returns(10).toArray(), [10]);
    equals(Enumerable.returns("").toArray(), [""]);
    equals(Enumerable.returns(void).toArray(), [void]);
    equals(Enumerable.returns(null).toArray(), [null]);
    equals(Enumerable.returns([1, 2, 3]).toArray(), [[1, 2, 3]]);
    equals(Enumerable.returns(%[]).toArray(), [%[]]);
}

// ======================================================== Enumerable.matches
function testEnumerableMatches
{
    equals(Enumerable.matches("abcd", /[a-z]/g).toArray(),
        [
            ["a"],
            ["b"],
            ["c"],
            ["d"]
        ]
    );
    equals(Enumerable.matches("a2bcd3e4", /([a-z])([0-9])/g).toArray(),
        [
            ["a2", "a", "2"],
            ["d3", "d", "3"],
            ["e4", "e", "4"]
        ]
    );
    equals(Enumerable.matches("", /[a-z]/g).toArray(), []);
    equals(Enumerable.matches("ABC", /[a-z]/g).toArray(), []);
}

// ======================================================== Enumerable.random
function testEnumerableRandom
{
    var enumerator = Enumerable.random().getEnumerator();
    for (var i = 0; i < 1000; ++i) {
        equals(enumerator.moveNext(), true);
        assert(typeof enumerator.current === "Real");
        assert(0 <= enumerator.current && enumerator.current < 1);
    }

    var generator = new global.Math.RandomGenerator();

    var enumerator = Enumerable.random(0).getEnumerator();
    generator.randomize(0);
    for (var i = 0; i < 1000; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, generator.random());
        assert(typeof enumerator.current === "Real");
        assert(0 <= enumerator.current && enumerator.current < 1);
    }

    var enumerator = Enumerable.random(68386357, 1000).getEnumerator();
    generator.randomize(68386357);
    for (var i = 0; i < 1000; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, generator.random());
        assert(typeof enumerator.current === "Real");
        assert(0 <= enumerator.current && enumerator.current < 1);
    }
    equals(enumerator.moveNext(), false);
}

// ======================================================== Enumerable.randomInt
function testEnumerableRandomInt
{
    var enumerator = Enumerable.randomInt(0, 10).getEnumerator();
    for (var i = 0; i < 1000; ++i) {
        equals(enumerator.moveNext(), true);
        assert(typeof enumerator.current === "Integer");
        assert(0 <= enumerator.current && enumerator.current <= 10);
    }

    var generator = new global.Math.RandomGenerator();

    var enumerator = Enumerable.randomInt(-10, 10, 0).getEnumerator();
    generator.randomize(0);
    for (var i = 0; i < 1000; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, (int)(generator.random() * 21) - 10);
        assert(typeof enumerator.current === "Integer");
        assert(-10 <= enumerator.current && enumerator.current <= 10);
    }

    var enumerator = Enumerable.randomInt(5, 10, 1668124, 1000).getEnumerator();
    generator.randomize(1668124);
    for (var i = 0; i < 1000; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, (int)(generator.random() * 6) + 5);
        assert(typeof enumerator.current === "Integer");
        assert(5 <= enumerator.current && enumerator.current <= 10);
    }
    equals(enumerator.moveNext(), false);
}

// ======================================================== where
function testWhere
{
    equals(
        Enumerable.range(1, 5)
            .where(function(x) { return x % 2 == 0; })
            .toArray(),
        [2, 4]
    );
    equals(
        Enumerable.repeat(3, 5)
            .where(function(x, index, limit) { return x * index <= limit; }, 6)
            .toArray(),
        [3, 3, 3]
    );
    equals(
        Enumerable.empty()
            .where(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 5)
            .where("2 < _ ")
            .toArray(),
        [3, 4, 5]
    );
    equals(
        Enumerable.from("abcdef")
            .where("3 <= _2 || _ == 'b'")
            .toArray()
            .join(","),
        "b,d,e,f"
    );
}

// ======================================================== select
function testSelect
{
    equals(
        Enumerable.range(1, 3)
            .select(function(x) { return x * 2; })
            .toArray(),
        [2, 4, 6]
    );
    equals(
        Enumerable.repeat(1, 4)
            .select(function(x, index, factor) { return x * index * factor; }, 5)
            .toArray(),
        [0, 5, 10, 15]
    );
    equals(
        Enumerable.from([])
            .select(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 3)
            .select("_ * 2")
            .toArray(),
        [2, 4, 6]
    );
    equals(
        Enumerable.range(0, 5)
            .select("_ + _2")
            .toArray(),
        [0, 2, 4, 6, 8]
    );
}

// ======================================================== selectMany
function testSelectMany
{
    equals(
        Enumerable.from([[1, 2, 3], [10, 20, 30]])
            .selectMany(function(x) { return x; })
            .toArray(),
        [1, 2, 3, 10, 20, 30]
    );
    equals(
        Enumerable.empty()
            .selectMany(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.from([[], [], %[], ""])
            .selectMany(function(x) { return x; })
            .toArray(),
        []
    );
    equals(
        Enumerable.from([[[1, 2], 3, 4], [10, [20, 30], 40]])
            .selectMany("_[_2]")
            .toArray(),
        [1, 2, 20, 30]
    );
    equals(
        Enumerable.from([
                [[1, 2], [3, 4]],
                [[10, 20], [30, 40]]
            ])
            .selectMany("_[_3]", void, 1)
            .toArray(),
        [3, 4, 30, 40]
    );
}

function testSelectManyWithResultSelector
{
    equals(
        Enumerable.from([
                %[ key:"key",  values:[1, 2, 3] ],
                %[ key:"key2", values:[4, 5] ],
                %[ key:"key3", values:[] ]
            ])
            .selectMany(
                function(x) { return x.values; },
                function(x, value) { return %[ key:x.key, value:value ]; }
            )
            .toArray(),
        [
            %[ key:"key",  value:1 ],
            %[ key:"key",  value:2 ],
            %[ key:"key",  value:3 ],
            %[ key:"key2", value:4 ],
            %[ key:"key2", value:5 ]
        ]
    );
    equals(
        Enumerable.from([1, 2, 3])
            .selectMany("[1, 2, 3]", "[_, _2]")
            .toArray(),
        [
            [1, 1], [1, 2], [1, 3],
            [2, 1], [2, 2], [2, 3],
            [3, 1], [3, 2], [3, 3]
        ]
    );
    equals(
        Enumerable.from([[], [], %[], ""])
            .selectMany(
                function(x) { return x; },
                function { throw new Exception("never called"); }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.from(["a", "b"])
            .selectMany("[_2]", "[_2, _]")
            .toArray(),
        [[0, "a"], [1, "b"]]
    );
    equals(
        Enumerable.from([1, 2, 3])
            .selectMany("[1, 2, _3]", "[_4, _, _2]", 3, "tag")
            .toArray(),
        [
            ["tag", 1, 1], ["tag", 1, 2], ["tag", 1, 3],
            ["tag", 2, 1], ["tag", 2, 2], ["tag", 2, 3],
            ["tag", 3, 1], ["tag", 3, 2], ["tag", 3, 3]
        ]
    );
}

// ======================================================== scan
function testScan
{
    equals(
        Enumerable.range(1, 5)
            .scan(function(a, x) { return a + x; })
            .toArray(),
        [1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5]
    );
    equals(
        Enumerable.empty()
            .scan(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 1)
            .scan(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(1, 3)
            .scan("_ + _2")
            .toArray(),
        [1+1, 1+1+1]
    );
    equals(
        Enumerable.repeat(1, 3)
            .scan("_ + _2 - _3", 10)
            .toArray(),
        [1+1-10, 1+1+1-10-10]
    );
}

// ======================================================== scanWithSeed
function testScanWithSeed
{
    equals(
        Enumerable.range(1, 5)
            .scanWithSeed(100, function(a, x) { return a + x; })
            .toArray(),
        [100+1, 100+1+2, 100+1+2+3, 100+1+2+3+4, 100+1+2+3+4+5]
    );
    equals(
        Enumerable.empty()
            .scanWithSeed(100, function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(1, 1)
            .scanWithSeed(100, "_ + _2")
            .toArray(),
        [100+1]
    );
    equals(
        Enumerable.repeat(1, 3)
            .scanWithSeed(100, "_ + _2 - _3", 10)
            .toArray(),
        [100+1-10, 100+1+1-10-10, 100+1+1+1-10-10-10]
    );
}

// ======================================================== distinct
function testDistinct
{
    equals(
        Enumerable.range(1, 3)
            .distinct()
            .toArray(),
        [1, 2, 3]
    );
    equals(
        Enumerable.repeat(1, 3)
            .distinct()
            .toArray(),
        [1]
    );
    equals(
        Enumerable.empty()
            .distinct()
            .toArray(),
        []
    );
    equals(
        Enumerable.from([-3, -2, -1, 0, 1, 2, 3])
            .distinct(function(x) { return x < 0 ? -x : x; })
            .toArray(),
        [-3, -2, -1, 0]
    );
    equals(
        Enumerable.from(["", "a", "b", "c", "ab", "ab", "aa", "xyz", "abc"])
            .distinct("_.length")
            .toArray(),
        ["", "a", "ab", "xyz"]
    );
    equals(
        Enumerable.range(1, 10)
            .distinct("_ % _2", 3)
            .toArray(),
        [1, 2, 3]
    );

    var ary = [
       -1, 0, 1,
       -1.0, 0.0, 1.0,
       true, false,
       "", "str", "str2", "true", "1", "null", "void",
       null, void
    ];
    equals(
         Enumerable.from(ary)
            .distinct()
            .toArray(),
        [
            -1, 0, 1,
            0.0,
            "", "str", "str2", "true", "null", "void",
            null, void
        ]
    );
}

// ======================================================== union
function testUnion
{
    equals(
        Enumerable.range(1, 3)
            .union(Enumerable.from([1, 10, 3, 5]))
            .toArray(),
        [1, 2, 3, 10, 5]
    );
    equals(
        Enumerable.repeat(1, 3)
            .union(Enumerable.range(0, 4))
            .toArray(),
        [1, 0, 2, 3]
    );
    equals(
        Enumerable.empty()
            .union(Enumerable.empty())
            .toArray(),
        []
    );
    equals(
        Enumerable.from([1, 1, 2, 3, 3, 0])
            .union(Enumerable.empty())
            .toArray(),
        [1, 2, 3, 0]
    );
    equals(
        Enumerable.empty()
            .union([1, 2, 3])
            .toArray(),
        [1, 2, 3]
    );
    equals(
        Enumerable.from([-3, -2, -1, 0, 1, 2, 3])
            .union([0, 1, 2, 3, 4], function(x) { return x < 0 ? -x : x; })
            .toArray(),
        [-3, -2, -1, 0, 4]
    );
    equals(
        Enumerable.from(["", "a", "b", "c", "ab", "ab", "aa", "xyz", "abc"])
            .union(["", "d", "ef", "ghi", "jklm"], "_.length")
            .toArray(),
        ["", "a", "ab", "xyz", "jklm"]
    );
    equals(
        Enumerable.range(1, 10)
            .union(Enumerable.range(-5, 10), "_ % _2", 3)
            .toArray(),
        [1, 2, 3, -5, -4]
    );

    var ary = [
       -1, 0, 1,
       -1.0, 0.0, 1.0,
       true, false,
       "", "str", "str2", "true", "1", "null", "void",
       null, void
    ];
    equals(
         Enumerable.from(ary)
            .union(ary)
            .toArray(),
        [
            -1, 0, 1,
            0.0,
            "", "str", "str2", "true", "null", "void",
            null, void
        ]
    );
}

// ======================================================== intersect
function testIntersect
{
    equals(
        Enumerable.range(1, 10)
            .intersect(Enumerable.from([4, 1, 2, 11]))
            .toArray(),
        [1, 2, 4]
    );
    equals(
        Enumerable.from([1, 1, 2, 3, 4, 5, 2])
            .intersect([2, 8, 4, 1, 2])
            .toArray(),
        [1, 2, 4]
    );
    equals(
        Enumerable.empty()
            .intersect(Enumerable.range(1, 3))
            .toArray(),
        []
    );
    equals(
        Enumerable.from([1, 1, 2, 3, 3, 0])
            .intersect(Enumerable.empty())
            .toArray(),
        []
    );
    equals(
        Enumerable.empty()
            .intersect([])
            .toArray(),
        []
    );
    equals(
        Enumerable.from([-3, -2, -1, 0, 1, 2, 3])
            .intersect([0, 1, 2, 3, 4], function(x) { return x < 0 ? -x : x; })
            .toArray(),
        [-3, -2, -1, 0]
    );
    equals(
        Enumerable.from(["", "a", "b", "c", "ab", "ab", "aa", "xyz", "abc"])
            .intersect(["", "d", "ef", "ghi", "jklm"], "_.length")
            .toArray(),
        ["", "a", "ab", "xyz"]
    );
    equals(
        Enumerable.range(1, 10)
            .intersect(Enumerable.range(-5, 10), "_ % _2", 3)
            .toArray(),
        [1, 2, 3]
    );

    var ary = [
       -1, 0, 1,
       -1.0, 0.0, 1.0,
       true, false,
       "", "str", "str2", "true", "1", "null", "void",
       null, void
    ];
    equals(
         Enumerable.from(ary)
            .intersect(ary)
            .toArray(),
        [
            -1, 0, 1,
            0.0,
            "", "str", "str2", "true", "null", "void",
            null, void
        ]
    );
}

// ======================================================== except
function testExcept
{
    equals(
        Enumerable.range(1, 6)
            .except(Enumerable.from([4, 3, 1, 0]))
            .toArray(),
        [2, 5, 6]
    );
    equals(
        Enumerable.from([1, 1, 2, 3, 4, 5, 2, 0])
            .except([2, 8, 4, 1, 2])
            .toArray(),
        [3, 5, 0]
    );
    equals(
        Enumerable.empty()
            .except(Enumerable.range(1, 3))
            .toArray(),
        []
    );
    equals(
        Enumerable.from([1, 1, 2, 3, 3, 0])
            .except(Enumerable.empty())
            .toArray(),
        [1, 2, 3, 0]
    );
    equals(
        Enumerable.empty()
            .except([])
            .toArray(),
        []
    );
    equals(
        Enumerable.from([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6])
            .except([0, 1, 2, 3], function(x) { return x < 0 ? -x : x; })
            .toArray(),
        [-5, -4, 6]
    );
    equals(
        Enumerable.from(["", "a", "b", "c", "ab", "ab", "aa", "xyz", "abc", "abcd", "abcde"])
            .except(["", "d", "ef", "ghi", "jklm"], "_.length")
            .toArray(),
        ["abcde"]
    );
    equals(
        Enumerable.range(1, 10)
            .except([1, 2], "_ % _2", 3)
            .toArray(),
        [3]
    );

    var ary = [
       -1, 0, 1,
       -1.0, 0.0, 1.0,
       true, false,
       "", "str", "str2", "true", "1", "null", "void",
       null, void
    ];
    equals(
         Enumerable.from(ary)
            .except(ary)
            .toArray(),
        []
    );
}

// ======================================================== innerJoin
function testInnerJoin
{
    equals(
        Enumerable.range(1, 3)
            .innerJoin(
                Enumerable.range(0, 5),
                function(a) { return a; },
                function(b) { return b; },
                function(a, b) { return @"${a}-${b}"; }
            )
            .toArray(),
        ["1-1", "2-2", "3-3"]
    );
    equals(
        Enumerable.range(0, 5)
            .innerJoin(
                ["a", "b", "ab", "cd", "ef"],
                function(a) { return a; },
                function(b) { return b.length; },
                function(a, b) { return %[ length:a, str:b ]; }
            )
            .toArray(),
        [
            %[ length:1, str:"a" ],
            %[ length:1, str:"b" ],
            %[ length:2, str:"ab" ],
            %[ length:2, str:"cd" ],
            %[ length:2, str:"ef" ]
        ]
    );
    equals(
        Enumerable.empty()
            .innerJoin(
                ["a", "b", "ab", "cd", "ef"],
                function(a) { return a; },
                function(b) { return b.length; },
                function(a, b) { return %[ length:a, str:b ]; }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 3)
            .innerJoin(
                Enumerable.empty(),
                function(a) { return a; },
                function(b) { return b; },
                function(a, b) { return @"${a}-${b}"; }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.empty()
            .innerJoin(
                Enumerable.empty(),
                function(a) { return a; },
                function(b) { return b; },
                function(a, b) { return @"${a}-${b}"; }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.range(0, 5)
            .innerJoin(["a", "b", "ab", "cd", "ef"], "_", "_.length", "%[ length:_, str:_2 ]")
            .toArray(),
        [
            %[ length:1, str:"a" ],
            %[ length:1, str:"b" ],
            %[ length:2, str:"ab" ],
            %[ length:2, str:"cd" ],
            %[ length:2, str:"ef" ]
        ]
    );
    equals(
        Enumerable.range(1, 3)
            .innerJoin(Enumerable.repeat(1, 2), "_2", "_2", "_3", -1)
            .toArray(),
        [-1, -1, -1, -1, -1, -1]
    );
}

// ======================================================== outerJoin
function testOuterJoin
{
    equals(
        Enumerable.range(1, 3)
            .outerJoin(
                Enumerable.range(0, 5),
                function(a) { return a; },
                function(b) { return b; },
                function(a, b) { return @"${a}-${b.toArray().join(',')}"; }
            )
            .toArray(),
        ["1-1", "2-2", "3-3"]
    );
    equals(
        Enumerable.range(0, 5)
            .outerJoin(
                ["a", "b", "ab", "cd", "ef"],
                function(a) { return a; },
                function(b) { return b.length; },
                function(a, b) { return %[ length:a, str:b.toArray().join(',') ]; }
            )
            .toArray(),
        [
            %[ length:0, str:"" ],
            %[ length:1, str:"a,b" ],
            %[ length:2, str:"ab,cd,ef" ],
            %[ length:3, str:"" ],
            %[ length:4, str:"" ]
        ]
    );
    equals(
        Enumerable.empty()
            .outerJoin(
                ["a", "b", "ab", "cd", "ef"],
                function(a) { return a; },
                function(b) { return b.length; },
                function(a, b) { return %[ length:a, str:b.toArray().join(',') ]; }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 3)
            .outerJoin(
                Enumerable.empty(),
                function(a) { return a; },
                function(b) { return b; },
                function(a, b) { return @"${a}-${b.toArray().join(',')}"; }
            )
            .toArray(),
        ["1-", "2-", "3-"]
    );
    equals(
        Enumerable.empty()
            .outerJoin(
                Enumerable.empty(),
                function(a) { return a; },
                function(b) { return b; },
                function(a, b) { return @"${a}-${b.toArray().join(',')}"; }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.range(0, 5)
            .outerJoin(
                ["a", "b", "ab", "cd", "ef"],
                "_",
                "_.length", "%[ length:_, str:_2.toArray().join(',') ]"
            )
            .toArray(),
        [
            %[ length:0, str:"" ],
            %[ length:1, str:"a,b" ],
            %[ length:2, str:"ab,cd,ef" ],
            %[ length:3, str:"" ],
            %[ length:4, str:"" ]
        ]
    );
    equals(
        Enumerable.range(1, 5)
            .groupJoin(
                ["a", "b", "ab", "cd", "ef"],
                "_2",
                "_2",
                "%[ number:_, str:_2.toArray().join(',') ]",
                "tag"
            )
            .toArray(),
        [
            %[ number:1, str:"a,b,ab,cd,ef" ],
            %[ number:2, str:"a,b,ab,cd,ef" ],
            %[ number:3, str:"a,b,ab,cd,ef" ],
            %[ number:4, str:"a,b,ab,cd,ef" ],
            %[ number:5, str:"a,b,ab,cd,ef" ]
        ]
    );
    equals(
        Enumerable.range(1, 3)
            .groupJoin(Enumerable.repeat(1, 2), "_2", "_2", "_3", -1)
            .toArray(),
        [-1, -1, -1]
    );
}

// ======================================================== groupJoin
function testGroupJoin
{
    equals(
        Enumerable.range(1, 3)
            .groupJoin(
                Enumerable.range(0, 5),
                function(a) { return a; },
                function(b) { return b; },
                function(a, b) { return @"${a}-${b.toArray().join(',')}"; }
            )
            .toArray(),
        ["1-1", "2-2", "3-3"]
    );
    equals(
        Enumerable.range(0, 5)
            .groupJoin(
                ["a", "b", "ab", "cd", "ef"],
                function(a) { return a; },
                function(b) { return b.length; },
                function(a, b) { return %[ length:a, str:b.toArray().join(',') ]; }
            )
            .toArray(),
        [
            %[ length:0, str:"" ],
            %[ length:1, str:"a,b" ],
            %[ length:2, str:"ab,cd,ef" ],
            %[ length:3, str:"" ],
            %[ length:4, str:"" ]
        ]
    );
    equals(
        Enumerable.empty()
            .groupJoin(
                ["a", "b", "ab", "cd", "ef"],
                function(a) { return a; },
                function(b) { return b.length; },
                function(a, b) { return %[ length:a, str:b.toArray().join(',') ]; }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 3)
            .groupJoin(
                Enumerable.empty(),
                function(a) { return a; },
                function(b) { return b; },
                function(a, b) { return @"${a}-${b.toArray().join(',')}"; }
            )
            .toArray(),
        ["1-", "2-", "3-"]
    );
    equals(
        Enumerable.empty()
            .groupJoin(
                Enumerable.empty(),
                function(a) { return a; },
                function(b) { return b; },
                function(a, b) { return @"${a}-${b.toArray().join(',')}"; }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.range(0, 5)
            .groupJoin(
                ["a", "b", "ab", "cd", "ef"],
                "_",
                "_.length", "%[ length:_, str:_2.toArray().join(',') ]"
            )
            .toArray(),
        [
            %[ length:0, str:"" ],
            %[ length:1, str:"a,b" ],
            %[ length:2, str:"ab,cd,ef" ],
            %[ length:3, str:"" ],
            %[ length:4, str:"" ]
        ]
    );
    equals(
        Enumerable.range(1, 5)
            .groupJoin(
                ["a", "b", "ab", "cd", "ef"],
                "_2",
                "_2",
                "%[ number:_, str:_2.toArray().join(',') ]",
                "tag"
            )
            .toArray(),
        [
            %[ number:1, str:"a,b,ab,cd,ef" ],
            %[ number:2, str:"a,b,ab,cd,ef" ],
            %[ number:3, str:"a,b,ab,cd,ef" ],
            %[ number:4, str:"a,b,ab,cd,ef" ],
            %[ number:5, str:"a,b,ab,cd,ef" ]
        ]
    );
    equals(
        Enumerable.range(1, 3)
            .groupJoin(Enumerable.repeat(1, 2), "_2", "_2", "_3", -1)
            .toArray(),
        [-1, -1, -1]
    );
}

// ======================================================== groupBy
function testGroupBy
{
    var groups = Enumerable.from(["a", "b", "cd", "ef", "gh", "ijk"])
        .groupBy(function(x) { return x.length; })
        .toArray();
    equals(groups.length, 3);
    var keyCheck = 0;
    for (var i = 0; i < groups.length; ++i) {
        switch(groups[i].key) {
        case "1":
            keyCheck |= 0b001;
            equals(groups[i].toArray(), ["a", "b"]);
            break;
        case "2":
            keyCheck |= 0b010;
            equals(groups[i].toArray(), ["cd", "ef", "gh"]);
            break;
        case "3":
            keyCheck |= 0b100;
            equals(groups[i].toArray(), ["ijk"]);
            break;
        default:
            assert(false);
        }
    }
    equals(keyCheck, 0b111);

    var groups = Enumerable.from(["b", "a", "cd", "gh", "ef", "ijk"])
        .groupBy("_2 + _.length", "_2 + _ ", void, "tag:")
        .toArray();
    equals(groups.length, 3);
    var keyCheck = 0;
    for (var i = 0; i < groups.length; ++i) {
        switch(groups[i].key) {
        case "tag:1":
            keyCheck |= 0b001;
            equals(groups[i].toArray(), ["tag:b", "tag:a"]);
            break;
        case "tag:2":
            keyCheck |= 0b010;
            equals(groups[i].toArray(), ["tag:cd", "tag:gh", "tag:ef"]);
            break;
        case "tag:3":
            keyCheck |= 0b100;
            equals(groups[i].toArray(), ["tag:ijk"]);
            break;
        default:
            assert(false);
        }
    }
    equals(keyCheck, 0b111);
}

function testGroupByWithResultSelector
{
    equals(Enumerable.from(["a", "b", "cd", "ef", "gh"])
        .groupBy(
            function(x) { return x.length; },
            function(x) { return x; },
            function(key, values) { return @"${key}:${values.toArray().join(',')}"; }
        )
        .toArray(),
        ["1:a,b", "2:cd,ef,gh"]
    );
    equals(Enumerable.empty()
        .groupBy(
            function(x) { throw new Exception("never called"); },
            function(x) { throw new Exception("never called"); },
            function(x) { throw new Exception("never called"); },
        )
        .toArray(),
        []
    );
    equals(Enumerable.from(["cd", "ef", "gh", "ijk"])
        .groupBy(
            "_2 + _.length",
            "_3 + _ ",
            "_5 + _ + ',' + _2.toArray().join(',')",
            "tag:", "elm:", "group:"
        )
        .toArray(),
        ["group:tag:2,elm:cd,elm:ef,elm:gh", "group:tag:3,elm:ijk"]
    );
}

// ======================================================== buffer
function testBuffer
{
    var enumerator = Enumerable.range(1, 10).buffer(3).getEnumerator();
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [1, 2, 3]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [4, 5, 6]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [7, 8, 9]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [10]);
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.empty().buffer(3).getEnumerator();
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.from("abcde").buffer(1).getEnumerator();
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), ["a"]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), ["b"]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), ["c"]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), ["d"]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), ["e"]);
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.range(1, 11).buffer(4, 2).getEnumerator();
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [1, 2, 3, 4]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [3, 4, 5, 6]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [5, 6, 7, 8]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [7, 8, 9, 10]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [9, 10, 11]);
    equals(enumerator.moveNext(), true);
    equals(enumerator.current.toArray(), [11]);
    equals(enumerator.moveNext(), false);
}

// ======================================================== startWith
function testStartWith
{
    equals(
        Enumerable.range(1, 3)
            .startWith(0)
            .toArray(),
        [0, 1, 2, 3]
    );
    equals(
        Enumerable.repeat(1, 3)
            .startWith(0, 1, 2)
            .toArray(),
        [0, 1, 2, 1, 1, 1]
    );
    equals(
        Enumerable.empty()
            .startWith(1)
            .toArray(),
        [1]
    );
}


// ======================================================== defaultIfEmpty
function testDefaultIfEmpty
{
    equals(
        Enumerable.range(1, 3)
            .defaultIfEmpty(-1)
            .toArray(),
        [1, 2, 3]
    );
    equals(
        Enumerable.repeat(1, 1)
            .defaultIfEmpty(-1)
            .toArray(),
        [1]
    );
    equals(
        Enumerable.empty()
            .defaultIfEmpty(-1)
            .toArray(),
        [-1]
    );
    equals(
        Enumerable.empty()
            .defaultIfEmpty(0)
            .defaultIfEmpty(1)
            .toArray(),
        [0]
    );
}

// ======================================================== concat
function testConcat
{
    equals(
        Enumerable.repeat(1, 3)
            .concat(Enumerable.repeat(2, 2))
            .concat(Enumerable.repeat(3, 1))
            .toArray(),
        [1, 1, 1, 2, 2, 3]
    );
    equals(
        Enumerable.repeat(1, 0)
            .concat(Enumerable.repeat(2, 1))
            .concat(Enumerable.empty())
            .toArray(),
        [2]
    );
    equals(
        Enumerable.repeat(1, 1)
            .concat([2, 1, 3])
            .toArray(),
        [1, 2, 1, 3]
    );
}

// ======================================================== zip
function testZip
{
    equals(
        Enumerable.repeat("key", 3)
            .zip(
                Enumerable.range(0, 3),
                function(a, b) { return [a, b]; }
            )
            .toArray(),
        [["key", 0], ["key", 1], ["key", 2]]
    );
    equals(
        Enumerable.repeat("key", 3)
            .zip(
                [1, 10, 100],
                function(a, b) { return [a, b]; }
            )
            .toArray(),
        [["key", 1], ["key", 10], ["key", 100]]
    );
    equals(
        Enumerable.repeat("key", 2)
            .zip(
                Enumerable.range(0, 3),
                function(a, b) { return [a, b]; }
            )
            .toArray(),
        [["key", 0], ["key", 1]]
    );
    equals(
        Enumerable.repeat("key", 3)
            .zip(
                Enumerable.range(0, 1),
                function(a, b) { return [a, b]; }
            )
            .toArray(),
        [["key", 0]]
    );
    equals(
        Enumerable.empty()
            .zip(
                Enumerable.range(0, 2),
                function { throw new Exception("never called"); }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.range(0, 3)
            .zip(
                Enumerable.empty(),
                function { throw new Exception("never called"); }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.empty()
            .zip(
                Enumerable.empty(),
                function { throw new Exception("never called"); }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat("key", 3)
            .zip(Enumerable.range(10, 3), "[_, _2, _3]", -1)
            .toArray(),
        [["key", 10, -1], ["key", 11, -1], ["key", 12, -1]]
    );
}

// ======================================================== repeat
function testRepeat
{
    equals(Enumerable.range(1,3).repeat(0).toArray(), []);
    equals(Enumerable.range(1,3).repeat(1).toArray(), [1, 2, 3]);
    equals(Enumerable.range(1,3).repeat(2).toArray(), [1, 2, 3, 1, 2, 3]);
    equals(Enumerable.range(1,3).repeat(3).toArray(), [1, 2, 3, 1, 2, 3, 1, 2, 3]);
    var enumerator = Enumerable.range(0,10).repeat().getEnumerator();
    for (var i = 0; i < 1000; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, i % 10);
    }

    equals(Enumerable.empty().repeat(0).toArray(), []);
    equals(Enumerable.empty().repeat(1).toArray(), []);
    equals(Enumerable.from("abc").repeat(2).toString(), "abcabc");
}

// ======================================================== skip
function testSkip
{
    equals(
        Enumerable.repeat(1, 5)
            .skip(3)
            .toArray(),
        [1, 1]
    );
    equals(
        Enumerable.empty()
            .skip(3)
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 5)
            .skip(0)
            .toArray(),
        [1, 2, 3, 4, 5]
    );

    var called = [];
    var enumerator = Enumerable.range(1, 5)
        .select(function(value, index, called) {
            // won't be called until moveNext called
            called.add(value);
            return value;
        }, called)
        .skip(3)
        .getEnumerator();
    equals(called, []);

    equals(enumerator.moveNext(), true);
    equals(enumerator.current, 4);
    equals(called, [1, 2, 3, 4]);

    equals(enumerator.moveNext(), true);
    equals(enumerator.current, 5);
    equals(called, [1, 2, 3, 4, 5]);

    equals(enumerator.moveNext(), false);
    equals(called, [1, 2, 3, 4, 5]);
}

// ======================================================== take
function testTake
{
    equals(
        Enumerable.range(1, 5)
            .take(3)
            .toArray(),
        [1, 2, 3]
    );
    equals(
        Enumerable.empty()
            .take(3)
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(1, 5)
            .take(0)
            .toArray(),
        []
    );
    equals(
        Enumerable.from("abcd")
            .take(2)
            .toArray()
            .join(""),
        "ab"
    );
}

// ======================================================== skipWhile
function testSkipWhile
{
    equals(
        Enumerable.range(1, 10)
            .skipWhile(function(x) { return x < 5; })
            .toArray(),
         [5, 6, 7, 8, 9, 10]
    );
    equals(
        Enumerable.empty()
            .skipWhile(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(0, 5)
            .skipWhile(function { return true; })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(0, 5, -1)
            .skipWhile("-3 <= _")
            .toArray(),
        [-4]
    );
    equals(
        Enumerable.repeat(10, 5)
            .skipWhile("_2 < 3")
            .toArray(),
        [10, 10]
    );
    equals(
        Enumerable.repeat(0, 5)
            .skipWhile("_2 < _3", 4)
            .toArray(),
        [0],
    );
}

// ======================================================== takeWhile
function testTakeWhile
{
    equals(
        Enumerable.range(1, 10)
            .takeWhile(function(x) { return x < 5; })
            .toArray(),
         [1, 2, 3, 4]
    );
    equals(
        Enumerable.empty()
            .takeWhile(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(0, 5)
            .takeWhile(function { return false; })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(0, 5, -1)
            .takeWhile("-3 <= _")
            .toArray(),
        [0, -1, -2, -3]
    );
    equals(
        Enumerable.repeat(10, 5)
            .takeWhile("_2 < 3")
            .toArray(),
        [10, 10, 10]
    );
    equals(
        Enumerable.repeat(0, 5)
            .takeWhile("_2 < _3", 3)
            .toArray(),
        [0, 0, 0],
    );
}

// ======================================================== orderBy
function testOrderBy
{
    equals(
        Enumerable.range(2, 5, -1)
            .orderBy(function(x) { return x; })
            .toArray(),
         [-2, -1, 0, 1, 2]
    );
    equals(
        Enumerable.from(["ab", "c", "def", "gh", "ijk", "l", "", "mn", "o"])
            .orderBy(function(x) { return x.length; })
            .toArray(),
         ["", "c", "l", "o", "ab", "gh", "mn", "def", "ijk"]
    );
    equals(
        Enumerable.empty()
            .orderBy(function(x) { throw new Exception("never called"); })
            .toArray(),
         []
    );
    equals(
        Enumerable.from(["ab", "c", "def", "gh", "ijk", "l", "", "mn", "o"])
            .orderBy("_", "_.length < _2.length ? -1 : _.length == _2.length ? 0 : 1")
            .toArray(),
         ["", "c", "l", "o", "ab", "gh", "mn", "def", "ijk"]
    );
}

// ======================================================== orderByDescending
function testOrderByDescending
{
    equals(
        Enumerable.range(-2, 5, 1)
            .orderByDescending(function(x) { return x; })
            .toArray(),
         [2, 1, 0, -1, -2]
    );
    equals(
        Enumerable.from(["ab", "c", "def", "gh", "ijk", "l", "", "mn", "o"])
            .orderByDescending(function(x) { return x.length; })
            .trace()
            .toArray(),
         ["def", "ijk", "ab", "gh", "mn", "c", "l", "o", ""]
    );
    equals(
        Enumerable.empty()
            .orderBy(function(x) { throw new Exception("never called"); })
            .toArray(),
         []
    );
    equals(
        Enumerable.from(["ab", "c", "def", "gh", "ijk", "l", "", "mn", "o"])
            .orderByDescending("_", "_.length < _2.length ? -1 : _.length == _2.length ? 0 : 1")
            .toArray(),
        ["def", "ijk", "ab", "gh", "mn", "c", "l", "o", ""]
    );
}

// ======================================================== thenBy
function testThenBy
{
    var obj = [
        %[ id:0, key:"b", value:2, ],
        %[ id:1, key:"a", value:0, ],
        %[ id:2, key:"c", value:-1, ],
        %[ id:3, key:"b", value:0, ],
        %[ id:4, key:"a", value:-1 ],
        %[ id:6, key:"b", value:1 ],
        %[ id:5, key:"b", value:1 ]
    ];
    equals(
        Enumerable.from(obj)
            .orderBy(function(x) { return x.key; })
            .thenBy(function(x) { return x.value; })
            .thenBy(function(x) { return x.id; })
            .toArray(),
         [
            %[ id:4, key:"a", value:-1 ],
            %[ id:1, key:"a", value:0, ],
            %[ id:3, key:"b", value:0, ],
            %[ id:5, key:"b", value:1 ],
            %[ id:6, key:"b", value:1 ],
            %[ id:0, key:"b", value:2, ],
            %[ id:2, key:"c", value:-1, ]
         ]
    );
    equals(
        Enumerable.empty()
            .orderBy(function(x) { throw new Exception("never called"); })
            .thenBy(function(x) { throw new Exception("never called"); })
            .toArray(),
         []
    );
    var obj = [
        %[ key:"b", value:2 ],
        %[ key:"a", value:0 ],
        %[ key:"c", value:-1 ],
        %[ key:"b", value:0 ],
        %[ key:"a", value:-1 ],
        %[ key:"b", value:1 ]
    ];
    equals(
        Enumerable.from(obj)
            .orderBy(function(x) { return x.key; })
            .thenBy("_", "_.value < _2.value ? -1 : _.value == _2.value ? 0 : 1")
            .toArray(),
         [
            %[ key:"a", value:-1 ],
            %[ key:"a", value:0 ],
            %[ key:"b", value:0 ],
            %[ key:"b", value:1 ],
            %[ key:"b", value:2 ],
            %[ key:"c", value:-1 ]
         ]
    );
}

// ======================================================== thenByDescending
function testThenByDescending
{
    var obj = [
        %[ id:0, key:"b", value:2, ],
        %[ id:1, key:"a", value:-1, ],
        %[ id:2, key:"c", value:-1, ],
        %[ id:3, key:"b", value:0, ],
        %[ id:4, key:"a", value:0 ],
        %[ id:5, key:"b", value:1 ],
        %[ id:6, key:"b", value:1 ]
    ];
    equals(
        Enumerable.from(obj)
            .orderBy(function(x) { return x.key; })
            .thenByDescending(function(x) { return x.value; })
            .thenByDescending(function(x) { return x.id; })
            .toArray(),
         [
            %[ id:4, key:"a", value:0, ],
            %[ id:1, key:"a", value:-1 ],
            %[ id:0, key:"b", value:2, ],
            %[ id:6, key:"b", value:1 ],
            %[ id:5, key:"b", value:1 ],
            %[ id:3, key:"b", value:0, ],
            %[ id:2, key:"c", value:-1, ]
         ]
    );
    equals(
        Enumerable.empty()
            .orderBy(function(x) { throw new Exception("never called"); })
            .thenByDescending(function(x) { throw new Exception("never called"); })
            .toArray(),
         []
    );
    var obj = [
        %[ key:"b", value:2 ],
        %[ key:"a", value:0 ],
        %[ key:"c", value:-1 ],
        %[ key:"b", value:0 ],
        %[ key:"a", value:-1 ],
        %[ key:"b", value:1 ]
    ];
    equals(
        Enumerable.from(obj)
            .orderBy(function(x) { return x.key; })
            .thenByDescending("_", "_.value < _2.value ? -1 : _.value == _2.value ? 0 : 1")
            .toArray(),
         [
            %[ key:"a", value:0 ],
            %[ key:"a", value:-1 ],
            %[ key:"b", value:2 ],
            %[ key:"b", value:1 ],
            %[ key:"b", value:0 ],
            %[ key:"c", value:-1 ]
         ]
    );
}

// ======================================================== reverse
function testReverse
{
    equals(Enumerable.range(1, 5).reverse().trace().toArray(), [5, 4, 3, 2, 1]);
    equals(Enumerable.repeat(1, 3).reverse().toArray(), [1, 1, 1]);
    equals(Enumerable.from("abcd").reverse().aggregate("_+_2"), "dcba");
    equals(Enumerable.empty().reverse().toArray(), []);
}

// ======================================================== count
function testCount
{
    equals(Enumerable.range(1, 3).count(), 3);
    equals(Enumerable.empty().count(), 0);
    equals(Enumerable.range(1, 100).count(), 100);
    equals(Enumerable.range(0, 10).count(function(x) { return x % 2 == 0; }), 5);
    equals(Enumerable.range(0, 100).count("_ < 10"), 10);
    equals(Enumerable.repeat(0, 100).count("false"), 0);
    equals(Enumerable.range(0, 100).count("_ < _2", 30), 30);
}

// ======================================================== indexOf
function testIndexOf
{
    equals(Enumerable.range(1, 3).indexOf(1), 0);
    equals(Enumerable.range(1, 3).indexOf(3), 2);
    equals(Enumerable.range(1, 3).indexOf(3.0), -1);
    equals(Enumerable.empty().indexOf(0), -1);
    equals(Enumerable.range(1, 3).indexOf(function(x) { return x == 2; }), 1);
    equals(Enumerable.range(1, 3).indexOf(function(x) { return x == 0; }), -1);
    equals(Enumerable.range(1, 3).indexOf(function(x, v) { return x == v; }, 1), 0);
    equals(Enumerable.range(1, 3).indexOf(function(x, v) { return x == v; }, 5), -1);
}

// ======================================================== isEmpty
function testIsEmpty
{
    equals(Enumerable.range(1, 3).isEmpty(), false);
    equals(Enumerable.empty().isEmpty(), true);
    equals(Enumerable.repeat(1, 10).isEmpty(), false);
    equals(Enumerable.returns(void).isEmpty(), false);
}

// ======================================================== any
function testAny
{
    equals(Enumerable.range(1, 3).any(), true);
    equals(Enumerable.empty().any(), false);
    equals(Enumerable.empty().any(function { throw new Exception("never called"); }), false);
    equals(Enumerable.range(0, 10).any(function(x) { return x < 0; }), false);
    equals(Enumerable.range(0, 10).any(function(x) { return x == 5; }), true);
    equals(Enumerable.range(0, 10).any("_ > 5"), true);
    equals(Enumerable.repeat(0, 100).any("false"), false);
    equals(
        Enumerable.repeat(0, 100)
            .any(function(x, a, b) {
                equals(x, 0);
                equals(a, "arg");
                equals(b, "arg2");
                return false;
            },  "arg", "arg2"),
        false
    );
}

// ======================================================== all
function testAll
{
    equals(Enumerable.range(1, 3).all(function(x) { return x < 10; }), true);
    equals(Enumerable.range(1, 3).all(function(x) { return x < 0; }), false);
    equals(Enumerable.empty().all(function { throw new Exception("never called"); }), true);
    equals(Enumerable.range(0, 10).all("_ > 5"), false);
    equals(Enumerable.repeat(0, 100).all("_ >= 0"), true);
    equals(
        Enumerable.repeat(0, 100)
            .all(function(x, a, b) {
                equals(x, 0);
                equals(a, "arg");
                equals(b, "arg2");
                return true;
            },  "arg", "arg2"),
        true
    );
}
// ======================================================== contains
function testContains
{
    equals(Enumerable.range(1, 3).contains(1), true);
    equals(Enumerable.range(1, 3).contains("1"), false);
    equals(Enumerable.range(1, 3).contains(3), true);
    equals(Enumerable.range(1, 3).contains(0), false);
    equals(Enumerable.range(1, 3).contains(-1), false);
    equals(Enumerable.range(1, 3).contains(-1, function(x) { return x < 0 ? -x : x; }), true);
    equals(Enumerable.range(1, 3).contains(-1, "_ < 0 ? -_ : _"), true);
    equals(Enumerable.range(1, 3).contains(6, "_ % _2", 3), true);
    equals(Enumerable.empty().contains(1), false);
    equals(Enumerable.from([]).contains(void), false);
    equals(Enumerable.from([1, void, 2]).contains(void), true);
    equals(Enumerable.from([]).contains(null), false);
    equals(Enumerable.from([null]).contains(null), true);
}

// ======================================================== sequenceEqual
function testSequenceEqual
{
    equals(Enumerable.range(0, 3).sequenceEqual([0, 1, 2]), true);
    equals(Enumerable.range(0, 3).sequenceEqual(Enumerable.range(0,3)), true);
    equals(Enumerable.range(0, 4).sequenceEqual([0, 1, 2]), false);
    equals(Enumerable.range(0, 4).sequenceEqual([]), false);
    equals(Enumerable.empty().sequenceEqual([]), true);
    equals(Enumerable.empty().sequenceEqual(Enumerable.empty()), true);
    equals(Enumerable.empty().sequenceEqual([1, 2, 3]), false);
    equals(Enumerable.repeat(0, 4).sequenceEqual([0, 0, 0]), false);
    equals(Enumerable.repeat(0, 3).sequenceEqual([0, 0, 0, 0]), false);
    equals(Enumerable.repeat("0", 1).sequenceEqual([0]), false);

    var arg = %[ called:0 ];
    equals(Enumerable.empty()
        .sequenceEqual(
            Enumerable.generate(
                function(index, arg) { return ++arg.called; },
                3, arg
            )
        ),
        false
    );
    equals(arg.called, 1);
}

// ======================================================== elementAt
function testElementAt
{
    equals(Enumerable.range(1, 5).elementAt(0), 1);
    equals(Enumerable.range(1, 5).elementAt(1), 2);
    equals(Enumerable.range(1, 5).elementAt(4), 5);
    throws(
        "Exception",
        "elementAt:No element at the specified index",
        function { Enumerable.range(1, 5).elementAt(5); }
    );
    throws(
        "Exception",
        "elementAt:No element at the specified index",
        function { Enumerable.empty().elementAt(0); }
    );
}

// ======================================================== elementAtOrDefault
function testElementAtOrDefault
{
    equals(Enumerable.range(1, 5).elementAtOrDefault(0, -1), 1);
    equals(Enumerable.range(1, 5).elementAtOrDefault(1, -1), 2);
    equals(Enumerable.range(1, 5).elementAtOrDefault(4, -1), 5);
    equals(Enumerable.range(1, 5).elementAtOrDefault(5, -1), -1);
    equals(Enumerable.empty().elementAtOrDefault(0, -1), -1);
}

// ======================================================== first
function testFirst
{
    equals(Enumerable.range(0, 5).first(), 0);
    equals(Enumerable.range(0, 5)
        .first(function(x) { return 3 <= x; }),
        3
    );
    equals(Enumerable.range(1, 5).first("2 <= _ "), 2);
    equals(Enumerable.range(1, 5).first("_2 <= _ ", 3), 3);
    throws(
        "Exception",
        "first:No element satisfies the condition",
        function { Enumerable.empty().first(); }
    );
    throws(
        "Exception",
        "first:No element satisfies the condition",
        function { Enumerable.empty().first(function { throw new Exception("never called"); }); }
    );
    throws(
        "Exception",
        "first:No element satisfies the condition",
        function { Enumerable.repeat(1, 4).first(function(x) { return false; }); }
    );
}

// ======================================================== firstOrDefault
function testFirstOrDefault
{
    equals(Enumerable.range(0, 5).firstOrDefault(-1), 0);
    equals(Enumerable.empty().firstOrDefault(-1), -1);
    equals(Enumerable.range(0, 5)
        .firstOrDefault(-1, function(x) { return 3 <= x; }),
        3
    );
    equals(Enumerable.empty()
        .firstOrDefault(-1, function { throw new Exception("never called"); }),
        -1
    );
    equals(Enumerable.range(1, 5).firstOrDefault(-1, "2 <= _ "), 2);
    equals(Enumerable.range(1, 5).firstOrDefault(-1, "_ == _2 ", 3), 3);
    equals(Enumerable.repeat(1, 10).firstOrDefault(-1, "false"), -1);
}

// ======================================================== last
function testLast
{
    equals(Enumerable.range(0, 5).last(), 4);
    equals(Enumerable.range(0, 5)
        .last(function(x) { return 3 <= x; }),
        4
    );
    equals(Enumerable.range(1, 5).last("_ < 2"), 1);
    equals(Enumerable.range(1, 5).last("_2 <= _ ", 3), 5);
    throws(
        "Exception",
        "last:No element satisfies the condition",
        function { Enumerable.empty().last(); }
    );
    throws(
        "Exception",
        "last:No element satisfies the condition",
        function { Enumerable.empty().last(function { throw new Exception("never called"); }); }
    );
    throws(
        "Exception",
        "last:No element satisfies the condition",
        function { Enumerable.repeat(1, 4).last(function(x) { return false; }); }
    );
}

// ======================================================== lastOrDefault
function testLastOrDefault
{
    equals(Enumerable.range(0, 5).lastOrDefault(-1), 4);
    equals(Enumerable.empty().lastOrDefault(-1), -1);
    equals(Enumerable.range(0, 5)
        .lastOrDefault(-1, function(x) { return 3 <= x; }),
        4
    );
    equals(Enumerable.empty().lastOrDefault(-1,
        function { throw new Exception("never called"); }),
        -1
    );
    equals(Enumerable.range(1, 5).lastOrDefault(-1, "_ <= _2 ", 3), 3);
    equals(Enumerable.range(1, 5).lastOrDefault(-1, "_2 <= _ ", 3), 5);
    equals(Enumerable.repeat(1, 10).lastOrDefault(-1, "false"), -1);
}

// ======================================================== single
function testSingle
{
    equals(Enumerable.range(0, 1).single(), 0);
    equals(Enumerable.range(0, 2)
        .single(function(x) { return x != 0; }),
        1
    );
    equals(Enumerable.range(0, 5, 2)
        .single("_ == _2", 8),
        8
    );
    throws(
        "Exception",
        "single:No element satisfies the condition",
        function { Enumerable.empty().single(); }
    );
    throws(
        "Exception",
        "single:No element satisfies the condition",
        function { Enumerable.empty().single(function { throw new Exception("never called"); }); }
    );
    throws(
        "Exception",
        "single:No element satisfies the condition",
        function { Enumerable.repeat(1, 4).single(function(x) { return false; }); }
    );
    throws(
        "Exception",
        "singleOrDefault:More than one element satisfies the condition",
        function { Enumerable.repeat(1, 4).single(function(x) { return true; }); }
    );
}

// ======================================================== singleOrDefault
function testSingleOrDefault
{
    equals(Enumerable.range(0, 1).singleOrDefault(-1), 0);
    equals(Enumerable.empty().singleOrDefault(-1), -1);
    equals(Enumerable.range(0, 5)
        .singleOrDefault(-1, function(x) { return x == 3; }),
        3
    );
    equals(Enumerable.range(3, 5)
        .singleOrDefault(-1, function(x, arg) { return x == arg; }, 3),
        3
    );
    equals(Enumerable.range(1,5).singleOrDefault(-1, "false"), -1);
    throws(
        "Exception",
        "singleOrDefault:More than one element satisfies the condition",
        function { Enumerable.repeat(1, 4).singleOrDefault(-1, "0 <= _"); }
    );
}

// ======================================================== aggregate
function testAggregate
{
    equals(
        Enumerable.range(1, 5).aggregate(function(a, x) { return a + x; }),
        1+2+3+4+5
    );
    equals(
        Enumerable.range(1, 5)
            .aggregate(
                function(a, x) { return a + x; },
                function(x) { return x * -10; }
            ),
        (1+2+3+4+5) * -10
    );
    throws(
        "Exception",
        "aggregate:Source contains no element",
        function {
            Enumerable.empty().aggregate(function { throw new Exception("never called"); });
        }
    );
    equals(
        Enumerable.range(10, 1).aggregate(function { throw new Exception("never called"); }),
        10
    );
    equals(
        Enumerable.repeat(1, 3).aggregate("_ + _2"),
        1+1+1
    );
    equals(
        Enumerable.range(1, 3).aggregate("_ + _2 - _3", "_ * _3", 10, -100),
        (1+2+3-10-10) * -100
    );
}

// ======================================================== aggregateWithSeed
function testAggregateWithSeed
{
    equals(
        Enumerable.range(1, 5).aggregateWithSeed(-10, function(a, x) { return a + x; }),
        -10+1+2+3+4+5
    );
    equals(
        Enumerable.range(1, 5)
            .aggregateWithSeed(
                -10,
                function(a, x) { return a + x; },
                function(x) { return x * -10; }
            ),
        (-10+1+2+3+4+5) * -10
    );
    equals(
        Enumerable.empty().aggregateWithSeed(-10, function { throw new Exception("never called"); }),
        -10
    );
    equals(
        Enumerable.range(10, 1).aggregateWithSeed(-10, function(a, x) { return a+x; }),
        -10 + 10
    );
    equals(
        Enumerable.repeat(1, 3).aggregateWithSeed(-10, "_ + _2"),
        -10+1+1+1
    );
    equals(
        Enumerable.range(1, 3).aggregateWithSeed(-10, "_ + _2 - _3", "_ * _3", 10, -100),
        (-10+1+2+3-10-10-10) * -100
    );
}

// ======================================================== average
function testAverage
{
    equals(Enumerable.range(0, 10).average(), 4.5);
    equals(Enumerable.range(0, 10, -1).average(), -4.5);
    equals(Enumerable.range(0, 10).average(function(x) { return x * 2; }), 9.0);
    throws(
        "Exception",
        "average:Source contains no element",
        function {
            Enumerable.empty().average(function { throw new Exception("never called"); });
        }
    );
    equals(Enumerable.range(1, 3).average("_ * _2", 5), (real)(1*5 + 2*5 + 3*5)/3);
}

// ======================================================== max
function testMax
{
    equals(Enumerable.range(0, 10).max(), 9);
    equals(Enumerable.range(0, 10, -1).max(), 0);
    equals(Enumerable.range(0, 10).max(function(x) { return x * 2; }), 18);
    throws(
        "Exception",
        "aggregate:Source contains no element",
        function {
            Enumerable.empty().max(function { throw new Exception("never called"); });
        }
    );
    equals(Enumerable.range(1, 3).max("_ * _2"), 3*2);
    equals(Enumerable.range(0, 10).max("_ * _3", 5), 9*5);
}

// ======================================================== min
function testMin
{
    equals(Enumerable.range(0, 10).min(), 0);
    equals(Enumerable.range(0, 10, -1).min(), -9);
    equals(Enumerable.range(0, 10).min(function(x) { return x * -2; }), -18);
    throws(
        "Exception",
        "aggregate:Source contains no element",
        function {
            Enumerable.empty().min(function { throw new Exception("never called"); });
        }
    );
    equals(Enumerable.range(1, 3).min("_ * _2"), 1*0);
    equals(Enumerable.range(3, 10).min("_ * _3", 5), 3*5);
}

// ======================================================== sum
function testSum
{
    equals(Enumerable.range(0, 10).sum(), 45);
    equals(Enumerable.range(0, 10, -1).sum(), -45);
    equals(Enumerable.range(0, 10).sum(function(x) { return x * 2; }), 90);
    throws(
        "Exception",
        "aggregate:Source contains no element",
        function {
            Enumerable.empty().sum(function { throw new Exception("never called"); });
        }
    );
    equals(Enumerable.range(1, 3).sum("_ * _2"), 1*0+2*1+3*2);
    equals(Enumerable.range(1, 3).sum("_ * _3", 5), 1*5+2*5+3*5);
}

// ======================================================== forEach
function testForEach
{
    var context = %[ i:0 ];
    equals(
        Enumerable.range(0, 10).forEach(function(x, index, a, b) {
            equals(x, i);
            equals(x, index);
            equals(a, "arg1");
            equals(b, "arg2");
            ++i;
        } incontextof context, "arg1", "arg2"),
        void
    );
    equals(context.i, 10);

    var context = %[ i:0 ];
    equals(
        Enumerable.range(0, 10).forEach(function {
            ++i;
            return i < 4;
        } incontextof context),
        void
    );
    equals(context.i, 4);

    Enumerable.empty().forEach(function { throw new Exception("never called"); });

    var ary = [];
    equals(
        Enumerable.range(0, 4).forEach("_3[_2] = _, true", ary),
        void
    );
    equals(ary, [0, 1, 2, 3]);
}

// ======================================================== trace
function testTrace
{
    var log = [];
    var logger = function(index, value, log) {
        log.add(@"${index}:${value}");
    };
    equals(Enumerable.range(1, 5)
        .trace(logger, log)
        .toArray(),
        [1, 2, 3, 4, 5]
    );
    equals(log, ["0:1", "1:2", "2:3", "3:4", "4:5"]);
    log.clear();

    equals(Enumerable.empty()
        .trace(logger, log)
        .toArray(),
        []
    );
    equals(log, []);
    log.clear();
}

// ======================================================== force
function testForce
{
    var log = [];
    var logger = function(index, value, log) {
        log.add(@"${index}:${value}");
    };
    equals(Enumerable.range(1, 3).trace(logger, log).force(), void);
    equals(log, ["0:1", "1:2", "2:3"]);
    log.clear();

    equals(Enumerable.empty().trace(logger, log).force(), void);
    equals(log, []);
    log.clear();

    equals(Enumerable.generate(
        function(index, log) {
            log.add("generate:" + index);
            if (0 < index) {
                throw new Exception();
            }
            return -1;
        }, 3, log)
        .trace(logger, log)
        .force(),
        void
    );
    equals(log, ["generate:0", "0:-1", "generate:1"]);
    log.clear();
}
