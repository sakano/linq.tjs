// ======================================================== Enumerable.from
function testFromArray
{
    var testArray = function(array) {
        var index = 0;
        var enumerable = Enumerable.from(array);
        var enumerator = enumerable.getEnumerator();
        while (enumerator.moveNext()) {
            equals(enumerator.current, array[index]);
            ++index;
        }
        equals(index, array.count);
    };

    testArray([1, 5, 10]);
    testArray([]);
    testArray([-1, "str", true, false, null, void]);
    testArray([void, [1, 2, 3], [], %[]]);
}

function testFromDictionary
{
    var testDictionary = function(dic) {
        var copy = %[];
        (Dictionary.assign incontextof copy)(dic);
        var enumerable = Enumerable.from(dic);
        var enumerator = enumerable.getEnumerator();
        while (enumerator.moveNext()) {
            var pair = enumerator.current;
            equals(pair.value, dic[pair.key]);
            equals(pair.value, copy[pair.key]);
            delete copy[pair.key];
        }
        equals(Scripts.getObjectKeys(copy).count, 0);
    };

    testDictionary(%[ key:1, key2:10, key3:-10 ]);
    testDictionary(%[]);
    testDictionary(%[ "int"=>1, "real"=>1.0, "null"=>null, "str"=>"str", "true"=>true, "false"=>false, "void"=>void ]);
    testDictionary(%[ ary:[100, 200], dic:%[ key:"value" ] ]);
}

function testFromString
{
    var testString = function(str) {
        var index = 0;
        var enumerable = Enumerable.from(str);
        var enumerator = enumerable.getEnumerator();
        while (enumerator.moveNext()) {
            equals(enumerator.current, str[index]);
            ++index;
        }
        equals(index, str.length);
    };

    testString("test");
    testString("");
    testString("aaa bb c ");
    testString("$");
}

function testFromEnumerable
{
    var enumerable = %[
        getEnumerator : function {}
    ];
    equals(Enumerable.from(enumerable), enumerable);

    equals(Enumerable.from(function{}), null);
}

// ======================================================== toArray
function testToArray
{
    equals(
        Enumerable.from([1, 10, 100, void, null, %[], [], void]).toArray(),
        [1, 10, 100, void, null, %[], [], void]
    );
    equals(Enumerable.from([]).toArray(), []);
    equals(Enumerable.from("str").toArray(), ["s", "t", "r"]);
    equals(Enumerable.from("s").toArray(), ["s"]);
    equals(Enumerable.from(%[ key:123 ]).toArray(), [ %[ key:"key", value:123 ] ]);
}

// ======================================================== toDictionary
function testToDictionary
{
    equals(
        Enumerable.range(1, 3)
            .toDictionary(function(x) { return x; }),
        %[ "1"=>1, "2"=>2, "3"=>3 ]
    ) ;
    equals(
        Enumerable.empty()
            .toDictionary(function(x) { throw new Exception("never called");}),
        %[]
    );
    equals(
        Enumerable.repeat(2, 4)
            .toDictionary(
                function(x, index) { return @"${x}*${index}"; },
                function(x, index) { return x * index; }
            ),
        %[ "2*0"=>0, "2*1"=>2, "2*2"=>4, "2*3"=>6 ]
    );
    equals(
        Enumerable.range(1, 3).toDictionary("_"),
        %[ "1"=>1, "2"=>2, "3"=>3 ]
    );
    equals(
        Enumerable.range(-1, 3, -1)
            .toDictionary("_2 * _3", "_ * _4", 10, 100),
        %[ "0"=>-100, "10"=>-200, "20"=>-300 ]
    );
    throws(
        "Exception",
        "toDictionary:keySelector produces duplicate keys",
        function { Enumerable.repeat(1, 2).toDictionary("_"); }
    );
}

// ======================================================== Enumerable.empty
function testEmpty
{
    var enumerable = Enumerable.empty();
    var enumerator = enumerable.getEnumerator();
    for (var i = 0; i < 100; ++i) {
        equals(enumerator.moveNext(), false);
    }
    equals(Enumerable.empty().toArray(), []);
}

// ======================================================== Enumerable.generate
function testGenerate
{
    var enumerator = Enumerable.generate(function { return 100; }).getEnumerator();
    for (var i = 0; i < 100; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, 100);
    }

    var enumerator = Enumerable.generate(function { return 0; }, 10).getEnumerator();
    for (var i = 0; i < 10; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, 0);
    }
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.generate(function { throw new Exception("never called"); }, 0).getEnumerator();
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.generate(
        function(index, ary) { return ary[index]; },
        3, [0, 10, 20]
    ).getEnumerator();
    for (var i = 0; i < 3; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, i*10);
    }
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.generate("_ * 10", 5).getEnumerator();
    for (var i = 0; i < 5; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, i * 10);
    }
    equals(enumerator.moveNext(), false);

}

// ======================================================== Enumerable.range
function testRange
{
    var ary = Enumerable.range(1, 10).toArray();
    equals(
        Enumerable.range(1, 10).toArray(),
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    );
    equals(
        Enumerable.range(1, 0).toArray(),
        []
    );
    equals(
        Enumerable.range(0, 1).toArray(),
        [0]
    );
    equals(
        Enumerable.range(-10, 6, 3).toArray(),
        [-10, -7, -4, -1, 2, 5]
    );

    var query = Enumerable.range(0, 3);
    equals(query.toArray(), [0, 1, 2]);
    equals(query.toArray(), [0, 1, 2]);
    equals(query.toArray(), [0, 1, 2]);
}

// ======================================================== Enumerable.repeat
function testRepeat
{
    var enumerator = Enumerable.repeat(10).getEnumerator();
    for (var i = 0; i < 1000; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, 10);
    }

    var enumerator = Enumerable.repeat(10, 5).getEnumerator();
    for (var i = 0; i < 5; ++i) {
        equals(enumerator.moveNext(), true);
        equals(enumerator.current, 10);
    }
    equals(enumerator.moveNext(), false);

    var enumerator = Enumerable.repeat(10, 0).getEnumerator();
    equals(enumerator.moveNext(), false);

    var query = Enumerable.repeat(0, 3);
    equals(query.toArray(), [0, 0, 0]);
    equals(query.toArray(), [0, 0, 0]);
    equals(query.toArray(), [0, 0, 0]);
}

// ======================================================== Enumerable.returns
function testReturns
{
    equals(Enumerable.returns(10).toArray(), [10]);
    equals(Enumerable.returns("").toArray(), [""]);
    equals(Enumerable.returns(void).toArray(), [void]);
    equals(Enumerable.returns(null).toArray(), [null]);
    equals(Enumerable.returns([1, 2, 3]).toArray(), [[1, 2, 3]]);
    equals(Enumerable.returns(%[]).toArray(), [%[]]);
}

// ======================================================== where
function testWhere
{
    equals(
        Enumerable.range(1, 5)
            .where(function(x) { return x % 2 == 0; })
            .toArray(),
        [2, 4]
    );
    equals(
        Enumerable.repeat(3, 5)
            .where(function(x, index, limit) { return x * index <= limit; }, 6)
            .toArray(),
        [3, 3, 3]
    );
    equals(
        Enumerable.empty()
            .where(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 5)
            .where("2 < _ ")
            .toArray(),
        [3, 4, 5]
    );
    equals(
        Enumerable.from("abcdef")
            .where("3 <= _2 || _ == 'b'")
            .toArray()
            .join(","),
        "b,d,e,f"
    );
}

// ======================================================== select
function testSelect
{
    equals(
        Enumerable.range(1, 3)
            .select(function(x) { return x * 2; })
            .toArray(),
        [2, 4, 6]
    );
    equals(
        Enumerable.repeat(1, 4)
            .select(function(x, index, factor) { return x * index * factor; }, 5)
            .toArray(),
        [0, 5, 10, 15]
    );
    equals(
        Enumerable.from([])
            .select(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 3)
            .select("_ * 2")
            .toArray(),
        [2, 4, 6]
    );
    equals(
        Enumerable.range(0, 5)
            .select("_ + _2")
            .toArray(),
        [0, 2, 4, 6, 8]
    );
}

// ======================================================== selectMany
function testSelectMany
{
    equals(
        Enumerable.from([[1, 2, 3], [10, 20, 30]])
            .selectMany(function(x) { return x; })
            .toArray(),
        [1, 2, 3, 10, 20, 30]
    );
    equals(
        Enumerable.empty()
            .selectMany(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.from([[], [], %[], ""])
            .selectMany(function(x) { return x; })
            .toArray(),
        []
    );
    equals(
        Enumerable.from([[[1, 2], 3, 4], [10, [20, 30], 40]])
            .selectMany("_[_2]")
            .toArray(),
        [1, 2, 20, 30]
    );
    equals(
        Enumerable.from([
                [[1, 2], [3, 4]],
                [[10, 20], [30, 40]]
            ])
            .selectMany("_[_3]", void, 1)
            .toArray(),
        [3, 4, 30, 40]
    );
}

function testSelectManyWithResultSelector
{
    equals(
        Enumerable.from([
                %[ key:"key",  values:[1, 2, 3] ],
                %[ key:"key2", values:[4, 5] ],
                %[ key:"key3", values:[] ]
            ])
            .selectMany(
                function(x) { return x.values; },
                function(x, value) { return %[ key:x.key, value:value ]; }
            )
            .toArray(),
        [
            %[ key:"key",  value:1 ],
            %[ key:"key",  value:2 ],
            %[ key:"key",  value:3 ],
            %[ key:"key2", value:4 ],
            %[ key:"key2", value:5 ]
        ]
    );
    equals(
        Enumerable.from([1, 2, 3])
            .selectMany("[1, 2, 3]", "[_, _2]")
            .toArray(),
        [
            [1, 1], [1, 2], [1, 3],
            [2, 1], [2, 2], [2, 3],
            [3, 1], [3, 2], [3, 3]
        ]
    );
    equals(
        Enumerable.from([[], [], %[], ""])
            .selectMany(
                function(x) { return x; },
                function { throw new Exception("never called"); }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.from(["a", "b"])
            .selectMany("[_2]", "[_2, _]")
            .toArray(),
        [[0, "a"], [1, "b"]]
    );
    equals(
        Enumerable.from([1, 2, 3])
            .selectMany("[1, 2, _3]", "[_4, _, _2]", 3, "tag")
            .toArray(),
        [
            ["tag", 1, 1], ["tag", 1, 2], ["tag", 1, 3],
            ["tag", 2, 1], ["tag", 2, 2], ["tag", 2, 3],
            ["tag", 3, 1], ["tag", 3, 2], ["tag", 3, 3]
        ]
    );
}

// ======================================================== scan
function testScan
{
    equals(
        Enumerable.range(1, 5)
            .scan(function(a, x) { return a + x; })
            .toArray(),
        [1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5]
    );
    equals(
        Enumerable.empty()
            .scan(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 1)
            .scan(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(1, 3)
            .scan("_ + _2")
            .toArray(),
        [1+1, 1+1+1]
    );
    equals(
        Enumerable.repeat(1, 3)
            .scan("_ + _2 - _3", 10)
            .toArray(),
        [1+1-10, 1+1+1-10-10]
    );
}

// ======================================================== scanWithSeed
function testScanWithSeed
{
    equals(
        Enumerable.range(1, 5)
            .scanWithSeed(100, function(a, x) { return a + x; })
            .toArray(),
        [100+1, 100+1+2, 100+1+2+3, 100+1+2+3+4, 100+1+2+3+4+5]
    );
    equals(
        Enumerable.empty()
            .scanWithSeed(100, function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(1, 1)
            .scanWithSeed(100, "_ + _2")
            .toArray(),
        [100+1]
    );
    equals(
        Enumerable.repeat(1, 3)
            .scanWithSeed(100, "_ + _2 - _3", 10)
            .toArray(),
        [100+1-10, 100+1+1-10-10, 100+1+1+1-10-10-10]
    );
}

// ======================================================== distinct
function testDistinct
{
    equals(
        Enumerable.range(1, 3)
            .distinct()
            .toArray(),
        [1, 2, 3]
    );
    equals(
        Enumerable.repeat(1, 3)
            .distinct()
            .toArray(),
        [1]
    );
    equals(
        Enumerable.empty()
            .distinct()
            .toArray(),
        []
    );
    equals(
        Enumerable.from([-3, -2, -1, 0, 1, 2, 3])
            .distinct(function(x) { return x < 0 ? -x : x; })
            .toArray(),
        [-3, -2, -1, 0]
    );
    equals(
        Enumerable.from(["", "a", "b", "c", "ab", "ab", "aa", "xyz", "abc"])
            .distinct("_.length")
            .toArray(),
        ["", "a", "ab", "xyz"]
    );

    var ary = [
       -1, 0, 1,
       -1.0, 0.0, 1.0,
       true, false,
       "", "str", "str2", "true", "1", "null", "void",
       null, void
    ];
    equals(
         Enumerable.from(ary)
            .distinct()
            .toArray(),
        [
            -1, 0, 1,
            0.0,
            "", "str", "str2", "true", "null", "void",
            null, void
        ]
    );
}

// ======================================================== startWith
function testStartWith
{
    equals(
        Enumerable.range(1, 3)
            .startWith(0)
            .toArray(),
        [0, 1, 2, 3]
    );
    equals(
        Enumerable.repeat(1, 3)
            .startWith(0, 1, 2)
            .toArray(),
        [0, 1, 2, 1, 1, 1]
    );
    equals(
        Enumerable.empty()
            .startWith(1)
            .toArray(),
        [1]
    );
}


// ======================================================== defaultIfEmpty
function testDefaultIfEmpty
{
    equals(
        Enumerable.range(1, 3)
            .defaultIfEmpty(-1)
            .toArray(),
        [1, 2, 3]
    );
    equals(
        Enumerable.repeat(1, 1)
            .defaultIfEmpty(-1)
            .toArray(),
        [1]
    );
    equals(
        Enumerable.empty()
            .defaultIfEmpty(-1)
            .toArray(),
        [-1]
    );
    equals(
        Enumerable.empty()
            .defaultIfEmpty(0)
            .defaultIfEmpty(1)
            .toArray(),
        [0]
    );
}

// ======================================================== concat
function testConcat
{
    equals(
        Enumerable.repeat(1, 3)
            .concat(Enumerable.repeat(2, 2))
            .concat(Enumerable.repeat(3, 1))
            .toArray(),
        [1, 1, 1, 2, 2, 3]
    );

    equals(
        Enumerable.repeat(1, 0)
            .concat(Enumerable.repeat(2, 1))
            .concat(Enumerable.empty())
            .toArray(),
        [2]
    );
}

// ======================================================== zip
function testZip
{
    equals(
        Enumerable.repeat("key", 3)
            .zip(
                Enumerable.range(0, 3),
                function(a, b) { return [a, b]; }
            )
            .toArray(),
        [["key", 0], ["key", 1], ["key", 2]]
    );
    equals(
        Enumerable.repeat("key", 2)
            .zip(
                Enumerable.range(0, 3),
                function(a, b) { return [a, b]; }
            )
            .toArray(),
        [["key", 0], ["key", 1]]
    );
    equals(
        Enumerable.repeat("key", 3)
            .zip(
                Enumerable.range(0, 1),
                function(a, b) { return [a, b]; }
            )
            .toArray(),
        [["key", 0]]
    );
    equals(
        Enumerable.empty()
            .zip(
                Enumerable.range(0, 2),
                function { throw new Exception("never called"); }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.range(0, 3)
            .zip(
                Enumerable.empty(),
                function { throw new Exception("never called"); }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.empty()
            .zip(
                Enumerable.empty(),
                function { throw new Exception("never called"); }
            )
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat("key", 3)
            .zip(
                Enumerable.range(3, 5),
                function(a, b, index) { return [a, index, b]; }
            )
            .toArray(),
        [["key", 0, 3], ["key", 1, 4], ["key", 2, 5]]
    );
    equals(
        Enumerable.repeat("key", 3)
            .zip(Enumerable.range(10, 3), "[_, _2, _3, _4]", -1)
            .toArray(),
        [["key", 10, 0, -1], ["key", 11, 1, -1], ["key", 12, 2, -1]]
    );
}
// ======================================================== skip
function testSkip
{
    equals(
        Enumerable.repeat(1, 5)
            .skip(3)
            .toArray(),
        [1, 1]
    );
    equals(
        Enumerable.empty()
            .skip(3)
            .toArray(),
        []
    );
    equals(
        Enumerable.range(1, 5)
            .skip(0)
            .toArray(),
        [1, 2, 3, 4, 5]
    );

    var called = [];
    var enumerator = Enumerable.range(1, 5)
        .select(function(value, index, called) {
            // won't be called until moveNext called
            called.add(value);
            return value;
        }, called)
        .skip(3)
        .getEnumerator();
    equals(called, []);

    equals(enumerator.moveNext(), true);
    equals(enumerator.current, 4);
    equals(called, [1, 2, 3, 4]);

    equals(enumerator.moveNext(), true);
    equals(enumerator.current, 5);
    equals(called, [1, 2, 3, 4, 5]);

    equals(enumerator.moveNext(), false);
    equals(called, [1, 2, 3, 4, 5]);
}

// ======================================================== take
function testTake
{
    equals(
        Enumerable.range(1, 5)
            .take(3)
            .toArray(),
        [1, 2, 3]
    );
    equals(
        Enumerable.empty()
            .take(3)
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(1, 5)
            .take(0)
            .toArray(),
        []
    );
    equals(
        Enumerable.from("abcd")
            .take(2)
            .toArray()
            .join(""),
        "ab"
    );
}

// ======================================================== skipWhile
function testSkipWhile
{
    equals(
        Enumerable.range(1, 10)
            .skipWhile(function(x) { return x < 5; })
            .toArray(),
         [5, 6, 7, 8, 9, 10]
    );
    equals(
        Enumerable.empty()
            .skipWhile(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(0, 5)
            .skipWhile(function { return true; })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(0, 5, -1)
            .skipWhile("-3 <= _")
            .toArray(),
        [-4]
    );
    equals(
        Enumerable.repeat(10, 5)
            .skipWhile("_2 < 3")
            .toArray(),
        [10, 10]
    );
    equals(
        Enumerable.repeat(0, 5)
            .skipWhile("_2 < _3", 4)
            .toArray(),
        [0],
    );
}

// ======================================================== takeWhile
function testTakeWhile
{
    equals(
        Enumerable.range(1, 10)
            .takeWhile(function(x) { return x < 5; })
            .toArray(),
         [1, 2, 3, 4]
    );
    equals(
        Enumerable.empty()
            .takeWhile(function { throw new Exception("never called"); })
            .toArray(),
        []
    );
    equals(
        Enumerable.repeat(0, 5)
            .takeWhile(function { return false; })
            .toArray(),
        []
    );
    equals(
        Enumerable.range(0, 5, -1)
            .takeWhile("-3 <= _")
            .toArray(),
        [0, -1, -2, -3]
    );
    equals(
        Enumerable.repeat(10, 5)
            .takeWhile("_2 < 3")
            .toArray(),
        [10, 10, 10]
    );
    equals(
        Enumerable.repeat(0, 5)
            .takeWhile("_2 < _3", 3)
            .toArray(),
        [0, 0, 0],
    );
}

// ======================================================== count
function testCount
{
    equals(Enumerable.range(1, 3).count(), 3);
    equals(Enumerable.empty().count(), 0);
    equals(Enumerable.range(1, 100).count(), 100);
    equals(Enumerable.range(0, 10).count(function(x) { return x % 2 == 0; }), 5);
    equals(Enumerable.range(0, 100).count("_ < 10"), 10);
    equals(Enumerable.repeat(0, 100).count("false"), 0);
    equals(Enumerable.range(0, 100).count("_ < _2", 30), 30);
}

// ======================================================== isEmpty
function testIsEmpty
{
    equals(Enumerable.range(1, 3).isEmpty(), false);
    equals(Enumerable.empty().isEmpty(), true);
    equals(Enumerable.repeat(1, 10).isEmpty(), false);
    equals(Enumerable.returns(void).isEmpty(), false);
}

// ======================================================== any
function testAny
{
    equals(Enumerable.range(1, 3).any(), true);
    equals(Enumerable.empty().any(), false);
    equals(Enumerable.empty().any(function { throw new Exception("never called"); }), false);
    equals(Enumerable.range(0, 10).any(function(x) { return x < 0; }), false);
    equals(Enumerable.range(0, 10).any(function(x) { return x == 5; }), true);
    equals(Enumerable.range(0, 10).any("_ > 5"), true);
    equals(Enumerable.repeat(0, 100).any("false"), false);
    equals(
        Enumerable.repeat(0, 100)
            .any(function(x, a, b) {
                equals(x, 0);
                equals(a, "arg");
                equals(b, "arg2");
                return false;
            },  "arg", "arg2"),
        false
    );
}

// ======================================================== all
function testAll
{
    equals(Enumerable.range(1, 3).all(function(x) { return x < 10; }), true);
    equals(Enumerable.range(1, 3).all(function(x) { return x < 0; }), false);
    equals(Enumerable.empty().all(function { throw new Exception("never called"); }), true);
    equals(Enumerable.range(0, 10).all("_ > 5"), false);
    equals(Enumerable.repeat(0, 100).all("_ >= 0"), true);
    equals(
        Enumerable.repeat(0, 100)
            .all(function(x, a, b) {
                equals(x, 0);
                equals(a, "arg");
                equals(b, "arg2");
                return true;
            },  "arg", "arg2"),
        true
    );
}

// ======================================================== elementAt
function testElementAt
{
    equals(Enumerable.range(1, 5).elementAt(0), 1);
    equals(Enumerable.range(1, 5).elementAt(1), 2);
    equals(Enumerable.range(1, 5).elementAt(4), 5);
    throws(
        "Exception",
        "elementAt:No element at the specified index",
        function { Enumerable.range(1, 5).elementAt(5); }
    );
    throws(
        "Exception",
        "elementAt:No element at the specified index",
        function { Enumerable.empty().elementAt(0); }
    );
}

// ======================================================== elementAtOrDefault
function testElementAtOrDefault
{
    equals(Enumerable.range(1, 5).elementAtOrDefault(0, -1), 1);
    equals(Enumerable.range(1, 5).elementAtOrDefault(1, -1), 2);
    equals(Enumerable.range(1, 5).elementAtOrDefault(4, -1), 5);
    equals(Enumerable.range(1, 5).elementAtOrDefault(5, -1), -1);
    equals(Enumerable.empty().elementAtOrDefault(0, -1), -1);
}

// ======================================================== first
function testFirst
{
    equals(Enumerable.range(0, 5).first(), 0);
    equals(Enumerable.range(0, 5)
        .first(function(x) { return 3 <= x; }),
        3
    );
    equals(Enumerable.range(1, 5).first("2 <= _ "), 2);
    equals(Enumerable.range(1, 5).first("1 <= _2 "), 2);
    equals(Enumerable.range(1, 5).first("_3 <= _2 ", 3), 4);
    throws(
        "Exception",
        "first:No element satisfies the condition",
        function { Enumerable.empty().first(); }
    );
    throws(
        "Exception",
        "first:No element satisfies the condition",
        function { Enumerable.empty().first(function { throw new Exception("never called"); }); }
    );
    throws(
        "Exception",
        "first:No element satisfies the condition",
        function { Enumerable.repeat(1, 4).first(function(x) { return false; }); }
    );
}

// ======================================================== firstOrDefault
function testFirstOrDefault
{
    equals(Enumerable.range(0, 5).firstOrDefault(-1), 0);
    equals(Enumerable.empty().firstOrDefault(-1), -1);
    equals(Enumerable.range(0, 5)
        .firstOrDefault(-1, function(x) { return 3 <= x; }),
        3
    );
    equals(Enumerable.empty()
        .firstOrDefault(-1, function { throw new Exception("never called"); }),
        -1
    );
    equals(Enumerable.range(1, 5).firstOrDefault(-1, "2 <= _ "), 2);
    equals(Enumerable.range(1, 5).firstOrDefault(-1, "1 <= _2 "), 2);
    equals(Enumerable.range(1, 5).firstOrDefault(-1, "_3 <= _2 ", 3), 4);
    equals(Enumerable.repeat(1, 10).firstOrDefault(-1, "false"), -1);
}

// ======================================================== last
function testLast
{
    equals(Enumerable.range(0, 5).last(), 4);
    equals(Enumerable.range(0, 5)
        .last(function(x) { return 3 <= x; }),
        4
    );
    equals(Enumerable.range(1, 5).last("_ < 2"), 1);
    equals(Enumerable.range(1, 5).last("_2 < 3"), 3);
    equals(Enumerable.range(1, 5).last("_3 <= _2 ", 3), 5);
    throws(
        "Exception",
        "last:No element satisfies the condition",
        function { Enumerable.empty().last(); }
    );
    throws(
        "Exception",
        "last:No element satisfies the condition",
        function { Enumerable.empty().last(function { throw new Exception("never called"); }); }
    );
    throws(
        "Exception",
        "last:No element satisfies the condition",
        function { Enumerable.repeat(1, 4).last(function(x) { return false; }); }
    );
}

// ======================================================== lastOrDefault
function testLastOrDefault
{
    equals(Enumerable.range(0, 5).lastOrDefault(-1), 4);
    equals(Enumerable.empty().lastOrDefault(-1), -1);
    equals(Enumerable.range(0, 5)
        .lastOrDefault(-1, function(x) { return 3 <= x; }),
        4
    );
    equals(Enumerable.empty().lastOrDefault(-1,
        function { throw new Exception("never called"); }),
        -1
    );
    equals(Enumerable.range(1, 5).lastOrDefault(-1, "_ <= 2"), 2);
    equals(Enumerable.range(1, 5).lastOrDefault(-1, "1 <= _2 "), 5);
    equals(Enumerable.range(1, 5).lastOrDefault(-1, "_ <= _3 ", 3), 3);
    equals(Enumerable.repeat(1, 10).lastOrDefault(-1, "false"), -1);
}

// ======================================================== aggregate
function testAggregate
{
    equals(
        Enumerable.range(1, 5).aggregate(function(a, x) { return a + x; }),
        1+2+3+4+5
    );
    equals(
        Enumerable.range(1, 5)
            .aggregate(
                function(a, x) { return a + x; },
                function(x) { return x * -10; }
            ),
        (1+2+3+4+5) * -10
    );
    throws(
        "Exception",
        "aggregate:Source contains no element",
        function {
            Enumerable.empty().aggregate(function { throw new Exception("never called"); });
        }
    );
    equals(
        Enumerable.range(10, 1).aggregate(function { throw new Exception("never called"); }),
        10
    );
    equals(
        Enumerable.repeat(1, 3).aggregate("_ + _2"),
        1+1+1
    );
    equals(
        Enumerable.range(1, 3).aggregate("_ + _2 - _3", "_ * _3", 10, -100),
        (1+2+3-10-10) * -100
    );
}

// ======================================================== aggregateWithSeed
function testAggregateWithSeed
{
    equals(
        Enumerable.range(1, 5).aggregateWithSeed(-10, function(a, x) { return a + x; }),
        -10+1+2+3+4+5
    );
    equals(
        Enumerable.range(1, 5)
            .aggregateWithSeed(
                -10,
                function(a, x) { return a + x; },
                function(x) { return x * -10; }
            ),
        (-10+1+2+3+4+5) * -10
    );
    equals(
        Enumerable.empty().aggregateWithSeed(-10, function { throw new Exception("never called"); }),
        -10
    );
    equals(
        Enumerable.range(10, 1).aggregateWithSeed(-10, function(a, x) { return a+x; }),
        -10 + 10
    );
    equals(
        Enumerable.repeat(1, 3).aggregateWithSeed(-10, "_ + _2"),
        -10+1+1+1
    );
    equals(
        Enumerable.range(1, 3).aggregateWithSeed(-10, "_ + _2 - _3", "_ * _3", 10, -100),
        (-10+1+2+3-10-10-10) * -100
    );
}

// ======================================================== average
function testAverage
{
    equals(Enumerable.range(0, 10).average(), 4.5);
    equals(Enumerable.range(0, 10, -1).average(), -4.5);
    equals(Enumerable.range(0, 10).average(function(x) { return x * 2; }), 9.0);
    throws(
        "Exception",
        "average:Source contains no element",
        function {
            Enumerable.empty().average(function { throw new Exception("never called"); });
        }
    );
    equals(Enumerable.range(1, 2).average("_ * _2"), (real)(1*0 + 2*1)/2);
    equals(Enumerable.range(1, 3).average("_ * _3", 5), (real)(1*5 + 2*5 + 3*5)/3);
}

// ======================================================== max
function testMax
{
    equals(Enumerable.range(0, 10).max(), 9);
    equals(Enumerable.range(0, 10, -1).max(), 0);
    equals(Enumerable.range(0, 10).max(function(x) { return x * 2; }), 18);
    throws(
        "Exception",
        "aggregate:Source contains no element",
        function {
            Enumerable.empty().max(function { throw new Exception("never called"); });
        }
    );
    equals(Enumerable.range(1, 3).max("_ * _2"), 3*2);
    equals(Enumerable.range(0, 10).max("_ * _3", 5), 9*5);
}

// ======================================================== min
function testMin
{
    equals(Enumerable.range(0, 10).min(), 0);
    equals(Enumerable.range(0, 10, -1).min(), -9);
    equals(Enumerable.range(0, 10).min(function(x) { return x * -2; }), -18);
    throws(
        "Exception",
        "aggregate:Source contains no element",
        function {
            Enumerable.empty().min(function { throw new Exception("never called"); });
        }
    );
    equals(Enumerable.range(1, 3).min("_ * _2"), 1*0);
    equals(Enumerable.range(3, 10).min("_ * _3", 5), 3*5);
}

// ======================================================== sum
function testSum
{
    equals(Enumerable.range(0, 10).sum(), 45);
    equals(Enumerable.range(0, 10, -1).sum(), -45);
    equals(Enumerable.range(0, 10).sum(function(x) { return x * 2; }), 90);
    throws(
        "Exception",
        "aggregate:Source contains no element",
        function {
            Enumerable.empty().sum(function { throw new Exception("never called"); });
        }
    );
    equals(Enumerable.range(1, 3).sum("_ * _2"), 1*0+2*1+3*2);
    equals(Enumerable.range(1, 3).sum("_ * _3", 5), 1*5+2*5+3*5);
}

// ======================================================== forEach
function testForEach
{
    var context = %[ i:0 ];
    equals(
        Enumerable.range(0, 10).forEach(function(x, index, a, b) {
            equals(x, i);
            equals(x, index);
            equals(a, "arg1");
            equals(b, "arg2");
            ++i;
        } incontextof context, "arg1", "arg2"),
        void
    );
    equals(context.i, 10);

    var context = %[ i:0 ];
    equals(
        Enumerable.range(0, 10).forEach(function {
            ++i;
            return i < 4;
        } incontextof context),
        void
    );
    equals(context.i, 4);

    Enumerable.empty().forEach(function { throw new Exception("never called"); });

    var ary = [];
    equals(
        Enumerable.range(0, 4).forEach("_3[_2] = _, true", ary),
        void
    );
    equals(ary, [0, 1, 2, 3]);
}
