// ======================================================== Enumerable.extendTo
Scripts.propSet(Enumerable, "extendTo", function(target)
{
    var methods = global.Enumerable.extensionMethods;
    var keys = global.Scripts.getObjectKeys(methods);
    for (var i = 0; i < keys.count; ++i) {
        var key = keys[i];
        var alreadyExist = true;
        try {
            alreadyExist = (typeof target[key] !== "undefined");
        } catch {
            // Array.count
        }
        if (!alreadyExist) {
            target[key] = methods[key];
        } else if (typeof target[key + "ByLinq" === "undefined"]) {
            target[key + "ByLinq"] = methods[key];
        }
    }

    if (target === global.Array) {
        if (typeof target.getEnumerator === "undefined") {
            target.getEnumerator = function {
                var e = global.Enumerable.from(this, false).getEnumerator();
                return e;
            };
        }
    }
}, Scripts.pfStaticMember | Scripts.pfMemberEnsure);


// ======================================================== Enumerable.isEnumerable
Scripts.propSet(Enumerable, "isEnumerable", function(target)
{
     return
        typeof target === "Object" &&
        typeof target.getEnumerator === "Object" &&
        target.getEnumerator instanceof "Function";
}, Scripts.pfStaticMember | Scripts.pfMemberEnsure);


// ======================================================== Enumerable.createEnumerable
Scripts.propSet(Enumerable, "createEnumerable", function
{
    return new global.EnumerableTemplate(...);
}, Scripts.pfStaticMember | Scripts.pfMemberEnsure);


// ======================================================== Enumerable.createLambda
Scripts.propSet(Enumerable, "createLambda", function(target)
{
    if (typeof target === "String") {
        return Scripts.eval("function(_, _2, _3, _4, _5, _6, _7, _8, _9) { return " + target + "; }");
    }
    return target;
}, Scripts.pfStaticMember | Scripts.pfMemberEnsure);


// ======================================================== EnumerableTemplate
class EnumerableTemplate
{
    function EnumerableTemplate(initialize, moveNext, args*)
    {
        this.initialize_ = initialize;
        this.moveNext_ = moveNext;
        this.args_ = args;
    }

    function getEnumerator()
    {
        var enumerator = new global.EnumeratorTemplate();
        enumerator.moveNext = (this.moveNext_ incontextof enumerator);
        (this.initialize_ incontextof enumerator)(args_*);
        return enumerator;
    }
}
Enumerable.extendTo(EnumerableTemplate);


// ======================================================== EnumeratorTemplate
class EnumeratorTemplate
{
    property current
    {
        getter { return this.result; }
    }
}
