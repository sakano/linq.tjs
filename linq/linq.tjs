if (typeof Scripts.getObjectKeys === "undefined") {
    Plugins.link("scriptsEx.dll");
}

Scripts.propSet(Enumerable, "extensionMethods", %[
    where : function(predicate, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, predicate, args) {
                this.self = self.getEnumerator();
                this.predicate = global.Enumerable.createLambda(predicate);
                this.args = args;
                this.index = -1;
            },
            function {
                while (self.moveNext()) {
                    ++index;
                    if (predicate(self.current, index, args*)) {
                        this.result = self.current;
                        return true;
                    }
                }
                return false;
            },
            this, predicate, args
        );
    },
    select : function(selector, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, selector, args) {
                this.self = self.getEnumerator();
                this.selector = global.Enumerable.createLambda(selector);
                this.args = args;
                this.index = -1;
            },
            function {
                while (self.moveNext()) {
                    ++index;
                    this.result = selector(self.current, index, args*);
                    return true;
                }
                return false;
            },
            this, selector, args
        );
    },
    selectMany : function(collectionSelector, resultSelector = function(a, b) { return b; }, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, collectionSelector, resultSelector, args) {
                this.self = self.getEnumerator();
                this.collectionSelector = global.Enumerable.createLambda(collectionSelector);
                this.resultSelector = global.Enumerable.createLambda(resultSelector);
                this.args = args;
                this.index = -1;
                this.selectedCollection = global.Enumerable.empty().getEnumerator();
            },
            function {
                while (selectedCollection.moveNext()) {
                    this.result = resultSelector(self.current, selectedCollection.current, args*);
                    return true;
                }
                while (self.moveNext()) {
                    ++index;
                    var collection = collectionSelector(self.current, index, args*);
                    var enumerable = global.Enumerable.from(collection);
                    selectedCollection = enumerable.getEnumerator();
                    if (selectedCollection.moveNext()) {
                        this.result = resultSelector(self.current, selectedCollection.current, args*);
                        return true;
                    }
                }
                return false;
            },
            this, collectionSelector, resultSelector, args
        );
    },
    scan : function(accumulator, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, accumulator, args) {
                this.self = self.getEnumerator();
                this.accumulator = global.Enumerable.createLambda(accumulator);
                this.args = args;
                this.initialized = false;
            },
            function {
                if (!initialized) {
                    initialized = true;
                    if (!self.moveNext()) {
                        return false;
                    }
                    this.accumulated = self.current;
                }

                if (self.moveNext()) {
                    this.result = accumulated = accumulator(accumulated, self.current, args*);
                    return true;
                }
                return false;
            },
            this, accumulator, args
        );
    },
    scanWithSeed : function(seed, accumulator, args*)
    {
        return this.startWith(seed).scan(accumulator, args*);
        return global.Enumerable.createEnumerable(
            function(self, seed, accumulator, args) {
                this.self = self.getEnumerator();
                this.seed = seed;
                this.accumulator = global.Enumerable.createLambda(accumulator);
                this.args = args;
            },
            function {
                if (self.moveNext()) {
                    this.result = seed = accumulator(seed, self.current, args*);
                    return true;
                }
                return false;
            },
            this, seed, accumulator, args
        );
    },
    distinct : function(keySelector = function(x) { return x; }, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, keySelector, args) {
                this.self = self.getEnumerator();
                this.keySelector = global.Enumerable.createLambda(keySelector);
                this.args = args;
                this.seenElements = %[];
                this.specialValues = [ void, "" ];
                this.seenSpecialValues = [];
            },
            function {
                while (self.moveNext()) {
                    var key = keySelector(self.current, args*);
                    var specialIndex = specialValues.find(key);
                    if (specialIndex >= 0) {
                        if (seenSpecialValues[specialIndex] === void) {
                            seenSpecialValues[specialIndex] = true;
                            this.result = self.current;
                            return true;
                        }
                    } else if (seenElements[key] === void) {
                        seenElements[key] = true;
                        this.result = self.current;
                        return true;
                    }
                }
                return false;
            },
            this, keySelector, args
        );
    },
    union : function(second, keySelector, args*)
    {
        return this.concat(second).distinct(keySelector, args*);
    },
    intersect : function(second, keySelector = function(x) { return x; }, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, second, keySelector, args) {
                this.first = self.getEnumerator();
                this.second = global.Enumerable.from(second).getEnumerator();
                this.keySelector = global.Enumerable.createLambda(keySelector);
                this.args = args;
                this.potentialElements = %[];
                this.specialValues = [ void, "" ];
                this.potentialSpecialValues = [];
                this.initialized = false;
            },
            function {
                if (!initialized) {
                    initialized = true;
                    while (second.moveNext()) {
                        var key = keySelector(second.current, args*);
                        var specialIndex = specialValues.find(key);
                        if (specialIndex >= 0) {
                            potentialSpecialValues[specialIndex] = true;
                        } else {
                            potentialElements[key] = true;
                        }
                    }
                }
                while (first.moveNext()) {
                    var key = keySelector(first.current, args*);
                    var specialIndex = specialValues.find(key);
                    if (specialIndex >= 0) {
                        if (potentialSpecialValues[specialIndex]) {
                            potentialSpecialValues[specialIndex] = false;
                            this.result = first.current;
                            return true;
                        }
                    } else if (potentialElements[key]) {
                        potentialElements[key] = false;
                        this.result = first.current;
                        return true;
                    }
                }
                return false;
            },
            this, second, keySelector, args
        );
    },
    except : function(second, keySelector = function(x) { return x; }, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, second, keySelector, args) {
                this.first = self.getEnumerator();
                this.second = global.Enumerable.from(second).getEnumerator();
                this.keySelector = global.Enumerable.createLambda(keySelector);
                this.args = args;
                this.bannedElements = %[];
                this.specialValues = [ void, "" ];
                this.bannedSpecialValues = [];
                this.initialized = false;
            },
            function {
                if (!initialized) {
                    initialized = true;
                    while (second.moveNext()) {
                        var key = keySelector(second.current, args*);
                        var specialIndex = specialValues.find(key);
                        if (specialIndex >= 0) {
                            bannedSpecialValues[specialIndex] = true;
                        } else {
                            bannedElements[key] = true;
                        }
                    }
                }
                while (first.moveNext()) {
                    var key = keySelector(first.current, args*);
                    var specialIndex = specialValues.find(key);
                    if (specialIndex >= 0) {
                        if (bannedSpecialValues[specialIndex] === void) {
                            bannedSpecialValues[specialIndex] = true;
                            this.result = first.current;
                            return true;
                        }
                    } else if (bannedElements[key] === void) {
                        bannedElements[key] = true;
                        this.result = first.current;
                        return true;
                    }
                }
                return false;
            },
            this, second, keySelector, args
        );
    },
    startWith : function(values*)
    {
        return global.Enumerable.from(values).concat(this);
    },
    defaultIfEmpty : function(defaultValue)
    {
        return global.Enumerable.createEnumerable(
            function(self, defaultValue) {
                this.self = self.getEnumerator();
                this.defaultValue = defaultValue;
                this.empty = true;
            },
            function {
                if (self.moveNext()) {
                    empty = false;
                    this.result = self.current;
                    return true;
                }
                if (empty) {
                    empty = false;
                    this.result = defaultValue;
                    return true;
                }
                return false;
            },
            this, defaultValue
        );
    },
    concat : function(second)
    {
        return global.Enumerable.createEnumerable(
            function(self, second) {
                this.first = self.getEnumerator();
                this.second = global.Enumerable.from(second).getEnumerator();
            },
            function {
                if (first.moveNext()) {
                    this.result = first.current;
                    return true;
                }
                if (second !== null) {
                    first = second;
                    second = null;
                    if (first.moveNext()) {
                        this.result = first.current;
                        return true;
                    }
                }
                return false;
            },
            this, second
        );
    },
    zip : function(second, resultSelector, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, second, resultSelector, args) {
                this.first = self.getEnumerator();
                this.second = global.Enumerable.from(second).getEnumerator();
                this.resultSelector = global.Enumerable.createLambda(resultSelector);
                this.args = args;
                this.index = -1;
            },
            function {
                var firstExist = first.moveNext();
                var secondExist = second.moveNext();
                if (!firstExist || !secondExist) {
                    return false;
                }

                ++index;
                this.result = resultSelector(first.current, second.current, index, args*);
                return true;
            },
            this, second, resultSelector, args
        );
    },
    skip : function(count)
    {
        return this.skipWhile(function(x, index, count) {
            return index < count;
        }, count);
    },
    take : function(count)
    {
        return this.takeWhile(function(x, index, count) {
            return index < count;
        }, count);
    },
    skipWhile : function(predicate, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, predicate, args) {
                this.self = self.getEnumerator();
                this.predicate = global.Enumerable.createLambda(predicate);
                this.args = args;
                this.skipped = false;
            },
            function {
                if (!skipped) {
                    skipped = true;
                    var index = 0;
                    while (self.moveNext()) {
                        if (!predicate(self.current, index,  args*)) {
                            this.result = self.current;
                            return true;
                        }
                        ++index;
                    }
                }

                if (self.moveNext()) {
                    this.result = self.current;
                    return true;
                }
                return false;
            },
            this, predicate, args
        );
    },
    takeWhile : function(predicate, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, predicate, args) {
                this.self = self.getEnumerator();
                this.predicate = global.Enumerable.createLambda(predicate);
                this.args = args;
                this.index = -1;
                this.taken = false;
            },
            function {
                if (!self.moveNext() || this.taken) {
                    return false;
                }

                ++index;
                if (predicate(self.current, index, args*)) {
                    this.result = self.current;
                    return true;
                }
                this.taken = true;
                return false;
            },
            this, predicate, args
        );
    },
    count : function(predicate = function { return true; }, args*)
    {
        predicate = global.Enumerable.createLambda(predicate);

        var counter = 0;
        var enumerator = this.getEnumerator();
        while (enumerator.moveNext()) {
            if (predicate(enumerator.current, args*)) {
                ++counter;
            }
        }
        return counter;
    },
    isEmpty : function()
    {
        return !any();
    },
    any : function(predicate, args*)
    {
        if (predicate === void) {
            return this.getEnumerator().moveNext();
        }

        predicate = global.Enumerable.createLambda(predicate);
        var enumerator = this.getEnumerator();
        while (enumerator.moveNext()) {
            if (predicate(enumerator.current, args*)) {
                return true;
            }
        }
        return false;
    },
    all : function(predicate, args*)
    {
        predicate = global.Enumerable.createLambda(predicate);

        var enumerator = this.getEnumerator();
        while (enumerator.moveNext()) {
            if (!predicate(enumerator.current, args*)) {
                return false;
            }
        }
        return true;
    },
    sequenceEqual : function(second, comparer = function(a, b) { return a === b; }, args*)
    {
        comparer = global.Enumerable.createLambda(comparer);

        var first = this.getEnumerator();
        var second = Enumerable.from(second).getEnumerator();
        for (var index = 0; ; ++index) {
            var firstExist = first.moveNext();
            var secondExist = second.moveNext();
            if (firstExist !== secondExist) {
                return false;
            }
            if (!firstExist) {
                return true;
            }
            if (!comparer(first.current, second.current, index, args*)) {
                return false;
            }
        }
    },
    elementAt : function(index)
    {
        var enumerator = this.getEnumerator();
        for (var i = 0; i <= index; ++i) {
            if (!enumerator.moveNext()) {
                throw new Exception("elementAt:No element at the specified index");
            }
        }
        return enumerator.current;
    },
    elementAtOrDefault : function(index, defaultValue)
    {
        var enumerator = this.getEnumerator();
        for (var i = 0; i <= index; ++i) {
            if (!enumerator.moveNext()) {
                return defaultValue;
            }
        }
        return enumerator.current;
    },
    first : function(predicate, args*)
    {
        var defaultValue = [];
        var result = this.firstOrDefault(defaultValue, predicate, args*);
        if (result === defaultValue) {
            throw new Exception("first:No element satisfies the condition");
        }
        return result;
    },
    firstOrDefault : function(defaultValue, predicate, args*)
    {
        predicate = global.Enumerable.createLambda(predicate);

        var enumerator = this.getEnumerator();
        var index = -1;
        while (enumerator.moveNext()) {
            if (predicate == void || predicate(enumerator.current, ++index, args*)) {
                return enumerator.current;
            }
        }
        return defaultValue;
    },
    last : function(predicate, args*)
    {
        var defaultValue = [];
        var result = this.lastOrDefault(defaultValue, predicate, args*);
        if (result === defaultValue) {
            throw new Exception("last:No element satisfies the condition");
        }
        return result;
    },
    lastOrDefault : function(defaultValue, predicate, args*)
    {
        predicate = global.Enumerable.createLambda(predicate);

        var enumerator = this.getEnumerator();
        var result = defaultValue;
        var index = -1;
        while (enumerator.moveNext()) {
            if (predicate === void || predicate(enumerator.current, ++index, args*)) {
                result = enumerator.current;
            }
        }
        return result;
    },
    single : function(predicate, args*)
    {
        var defaultValue = [];
        var result = this.singleOrDefault(defaultValue, predicate, args*);
        if (result === defaultValue) {
            throw new Exception("single:No element satisfies the condition");
        }
        return result;
    },
    singleOrDefault : function(defaultValue, predicate, args*)
    {
        predicate = global.Enumerable.createLambda(predicate);

        var enumerator = this.getEnumerator();
        var index = -1;
        var result = defaultValue;
        var found = false;
        while (enumerator.moveNext()) {
            if (predicate == void || predicate(enumerator.current, ++index, args*)) {
                if (found) {
                    throw new Exception("singleOrDefault:More than one element satisfies the condition");
                }
                result = enumerator.current;
                found = true;
            }
        }
        return result;
    },
    aggregate : function(accumulator, resultSelector = function(x) { return x; }, args*)
    {
        accumulator = global.Enumerable.createLambda(accumulator);
        resultSelector = global.Enumerable.createLambda(resultSelector);

        var enumerator = this.getEnumerator();
        if (!enumerator.moveNext()) {
            throw new Exception("aggregate:Source contains no element");
        }

        var accumulated = enumerator.current;
        while (enumerator.moveNext()) {
            accumulated = accumulator(accumulated, enumerator.current, args*);
        }
        return resultSelector(accumulated, args*);
    },
    aggregateWithSeed : function(seed, accumulator, resultSelector = function(x) { return x; }, args*)
    {
        return this.startWith(seed).aggregate(accumulator, resultSelector, args*);
    },
    average : function(selector, args*)
    {
        selector = global.Enumerable.createLambda(selector);

        var sum = 0;
        var count = 0;
        var enumerator = this.getEnumerator();
        while (enumerator.moveNext()) {
            sum +=
                selector === void
                ? enumerator.current
                : selector(enumerator.current, count, args*);
            ++count;
        }

        if (count === 0) {
            throw new Exception("average:Source contains no element");
        }
        return sum / count;
    },
    max : function(selector, args*)
    {
        var query = this;
        if (selector !== void) {
            query = query.select(selector, args*);
        }
        return query.aggregate(
            function(a, b) { return a > b ? a : b; },
            void,
            args*);
    },
    min : function(selector, args*)
    {
        var query = this;
        if (selector !== void) {
            query = query.select(selector, args*);
        }
        return query.aggregate(
            function(a, b) { return a < b ? a : b; },
            void,
            args*);
    },
    sum : function(selector, args*)
    {
        var query = this;
        if (selector !== void) {
            query = query.select(selector, args*);
        }
        return query.aggregate(
            function(a, b) { return a + b; },
            void,
            args*);
    },
    forEach : function(callback, args*)
    {
        callback = global.Enumerable.createLambda(callback);

        var index = 0;
        var enumerator = this.getEnumerator();
        while (enumerator.moveNext()) {
            if (callback(enumerator.current, index, args*) === false) {
                return;
            }
            ++index;
        }
    },
    toArray : function
    {
        var result = [];
        var enumerator = getEnumerator();
        while (enumerator.moveNext()) {
            result.add(enumerator.current);
        }
        return result;
    },
    toDictionary : function(keySelector, elementSelector = function(x) { return x; }, args*)
    {
        keySelector = global.Enumerable.createLambda(keySelector);
        elementSelector = global.Enumerable.createLambda(elementSelector);

        var result = %[];
        var enumerator = getEnumerator();
        for (var index = 0; enumerator.moveNext(); ++index) {
            var current = enumerator.current;
            var key = keySelector(current, index, args*);
            if (result[key] !== void) {
                throw new Exception("toDictionary:keySelector produces duplicate keys");
            }
            result[key] = elementSelector(current, index, args*);
        }
        return result;
    },
    toLookup : function(keySelector, elementSelector = function(x) { return x; }, args*)
    {
        keySelector = global.Enumerable.createLambda(keySelector);
        elementSelector = global.Enumerable.createLambda(elementSelector);

        var result = %[];
        var enumerator = getEnumerator();
        for (var index = 0; enumerator.moveNext(); ++index) {
            var current = enumerator.current;
            var key = keySelector(current, index, args*);
            if (result[key] === void) {
                result[key] = [];
            }
            result[key].add(elementSelector(current, index, args*));
        }
        return result;
    },
    trace : function(logger = global.Debug.message, args*)
    {
        return global.Enumerable.createEnumerable(
            function(self, logger, args) {
                this.self = self.getEnumerator();
                this.logger = logger;
                this.args = args;
                this.index = -1;
            },
            function {
                if (!self.moveNext()) return false;
                this.result = self.current;
                ++index;
                logger(index, result, args*);
                return true;
            },
            this, logger, args
        );
    },
    force : function()
    {
        var enumerator = this.getEnumerator();
        try {
            while (enumerator.moveNext()) {}
        } catch {}
    }
], Scripts.pfStaticMember | Scripts.pfMemberEnsure);



class Enumerable
{
}

Scripts.execStorage("linq_utility.tjs");
Scripts.execStorage("linq_generate.tjs");
